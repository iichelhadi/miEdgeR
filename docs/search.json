[{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About this vignette","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"walkthrough demonstrates build mutual-information (MI) networks hypergraphs single-cell RNA-seq data using miEdgeR. extract cluster-specific gene expression, compute pairwise MI, refine networks percolation community detection, finally assemble visualize hypergraph gene modules. Prerequisites: R (≥ 4.2.0) Seurat object clustering metadata (RNA_snn_res.0.2) optional pseudotime Packages: miEdgeR, Seurat, igraph, hypergraph, dplyr, ggplot2, ggraph, flextable","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"vignette walks key steps MI network construction higher-order hypergraph analysis. Starting Seurat object show filter highly variable genes, compute threshold MI, remove noise percolation, detect communities, finally represent communities hyperedges.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"load-libraries-and-data","dir":"Articles","previous_headings":"","what":"Load Libraries and Data","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"load necessary packages read preprocessed Seurat object. Ensure object contains clustering column (RNA_snn_res.0.1 seurat demo pbmc3K data) corresponding cluster IDs.","code":"library(Seurat) library(miEdgeR) library(igraph) library(dplyr) library(ggplot2) library(ggraph) library(flextable)  seurat_obj <- readRDS('pbmc3k.rds')"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"data-exploration","dir":"Articles","previous_headings":"","what":"Data exploration","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"Exploring preprocessed pbmc3k data. tutorial focus CD14+ Mono cluster “1”","code":"DimPlot(seurat_obj, reduction = 'umap') features = c(\"MS4A1\", \"GNLY\", \"CD3E\", \"CD14\",               \"FCER1A\", \"FCGR3A\", \"LYZ\", \"PPBP\", \"CD8A\") VlnPlot(seurat_obj, features = features)"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"building-a-mutual-information-network","dir":"Articles","previous_headings":"","what":"Building a Mutual-Information Network","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"call compute_mi_network(), hood: Extracts expression cluster “1” (1,500 cells; genes > 5% cells). Filters top 3,000 variable genes (removing housekeeping genes). Discretizes expression (adaptive binning) computes pairwise MI parallel. Constructs undirected igraph object thresholding 95th percentile MI values. can adjust percentile (e.g. 0.90 liberal edges) supply fixed_threshold absolute MI cutoffs. Note: computing mi-network can computationally demanding. strongly advice limit number cells genes variable ones resulting MI matrix filtered using 95th percentile threshold build_mi_graph(), producing graph 2911 genes (nodes), 211,804 edges, density ~0.05. indicates substantial gene-gene co-dependence within cluster.","code":"result <- compute_mi_network(   seurat_obj,   cluster_id = \"1\",   cluster_field = \"RNA_snn_res.0.1\",   assay_name = \"RNA\",   counts_layer = \"counts\",   data_layer = \"data\",   min_expr_pct = 0.05,   top_n_genes = 3000,   n_cores = 65 ) ## Using adaptive nbins = 9 mi_matrix <- result$mi_matrix graph_percentile <- build_mi_graph(mi_matrix,                                     threshold_method = \"percentile\",                                     percentile = 0.95) cat(\"Vertices:\", vcount(graph_percentile), \"\\n\") ## Vertices: 2911 cat(\"Edges:\", ecount(graph_percentile), \"\\n\") ## Edges: 211804 cat(\"Density:\", graph.density(graph_percentile), \"\\n\") ## Density: 0.05000679"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"consensus-edges-via-percolation","dir":"Articles","previous_headings":"","what":"Consensus Edges via Percolation","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"Real-world networks can noisy. apply simple “percolation” strategy: Pre-filter: Keep top 5% edges weight. Resample 100 times, time retaining 60% edges random. Consensus: Edges appearing ≥ 50% iterations considered stable. yields consensus graph filters spurious edges. Community detection performed label propagation (cluster_label_prop()), yielding two robust gene communities (sizes: 571 93). neighborhood overlap step enriched communities including strongly connected neighboring genes.","code":"g_consensus <- percolate_graph(graph_percentile, n_iterations = 100,                                 edge_fraction = 0.6, freq_threshold = 0.5,                                 percentile = 0.95) set.seed(123) lc_comm <- cluster_label_prop(g_consensus, weights = E(g_consensus)$weight) lc_groups <- split(V(g_consensus)$name, membership(lc_comm)) lc_groups <- Filter(function(x) length(x) >= 10, lc_groups)  # Neighborhood overlap adj_matrix <- as_adjacency_matrix(g_consensus, attr = \"weight\", sparse = FALSE) overlap_threshold <- 0.1 for (node in V(g_consensus)$name) {   idx <- which(V(g_consensus)$name == node)   neighbors <- V(g_consensus)$name[adj_matrix[idx, ] > 0]   if (length(neighbors) == 0) next   for (i in seq_along(lc_groups)) {     comm_genes <- lc_groups[[i]]     ov <- length(intersect(neighbors, comm_genes)) / length(neighbors)     if (ov >= overlap_threshold && !(node %in% comm_genes)) {       lc_groups[[i]] <- c(comm_genes, node)     }   } }  large_communities <- lc_groups cat(\"Communities (size >= 10):\", length(large_communities), \"\\n\") ## Communities (size >= 10): 2 cat(\"Sizes:\", sapply(large_communities, length), \"\\n\") ## Sizes: 571 93"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"clustering-coefficient","dir":"Articles","previous_headings":"","what":"Clustering coefficient","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"Compute additional network metrics consensus graph. Centrality Metric Top 5 Genes Degree ATP5D, PSMA7, NEDD8, COPE, C19orf43, C11orf31, LSP1, UQCR11.1, ATP6V1F, EIF3G Betweenness S100A8, NEDD8, ATP5D, LDHA, LYZ, BRK1, COPE, HIGD2A, LAMTOR1, BST2 Closeness ATP5D, NEDD8, PSMA7, C19orf43, LSP1, COPE, TALDO1, UQCR11.1, ITGB2, AP2S1 assessed topology consensus MI network using global clustering coefficient (transitivity()), moderately high, indicating local gene co-regulation. Centrality analysis identified key genes based degree, betweenness, closeness, highlighting potential regulatory hubs ATP5D, NEDD8, COPE. central genes may play critical roles cluster-specific transcriptional programs.","code":"clustering_coeff <- transitivity(g_consensus, type = \"global\") cat(\"Global clustering coefficient:\", clustering_coeff, \"\\n\") ## Global clustering coefficient: 0.3873887 # Centrality measures (degree, betweenness, closeness) degree_centrality <- degree(g_consensus) betweenness_centrality <- betweenness(g_consensus) closeness_centrality <- closeness(g_consensus)  # Top 5 genes by each centrality measure top_degree <- names(sort(degree_centrality, decreasing = TRUE))[1:10] top_betweenness <- names(sort(betweenness_centrality, decreasing = TRUE))[1:10] top_closeness <- names(sort(closeness_centrality, decreasing = TRUE))[1:10]  # Create a summary table centrality_table <- data.frame(   Metric = c(\"Degree\", \"Betweenness\", \"Closeness\"),   Top_Genes = c(     paste(top_degree, collapse = \", \"),     paste(top_betweenness, collapse = \", \"),     paste(top_closeness, collapse = \", \")   ),   stringsAsFactors = FALSE ) ft_centrality <- flextable::flextable(centrality_table) %>%   flextable::autofit() %>%   flextable::set_header_labels(Metric = \"Centrality Metric\", Top_Genes = \"Top 5 Genes\") %>%   flextable::bg(part = \"header\", bg = \"gray\") %>%   flextable::theme_vanilla() ft_centrality"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"network-visualization","dir":"Articles","previous_headings":"","what":"Network Visualization","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"Visualize subset MI network. Nodes colored community, top hub genes per community labeled. plot highlights distinct gene modules highly connected core genes ATP5D, PSMA7, LYZ.","code":"plot_mi_network(g_consensus, large_communities, title = \"C1 MI Network Communities\")"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"hypergraph-visualization","dir":"Articles","previous_headings":"","what":"Hypergraph Visualization","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"visualize overlapping gene communities, constructed hypergraph genes connected assigned communities. Overlapping genes (shared across communities) highlighted red, community nodes green, unique genes blue. representation captures complex gene sharing across modules, emphasizing central roles genes like LYZ, GSTP1, various MHC class genes.","code":"plot_hypergraph(large_communities, comm_indices = c(1, 2),                  title = \"C1 Hypergraph with Overlapping Communities\") ## Overlapping genes: 92  ## Shared genes: CD52, CD99, CEBPB, CFL1, CTSC, FTL, GRN, HLA-DRA, IFITM2, IFITM3, LY6E, MS4A6A, NAP1L1, PTPN6, S100A4, S100A6, S100A8, S100A9, SOD1, STXBP2, TIMP1, TUBA1B, TYROBP, UBC, VIM, YBX1, ARPC1B, VPS28, CST3, HLA-DMB, HLA-DQA2, HLA-DQB1, PSAP, ODF3B, ABI3, PSMB6, GNB2L1, NACA, ADA, IFITM1, NAAA, FOLR3, NCF1, CYTIP, EEF1D, CAPZA2, CSF3R, EVL, MNDA, MPC1, RBP7, S100A12, SRA1, WSB1, AIF1, ATP5G2, CD14, COTL1, CTSS, FCER1G, FCGR3A, FCN1, GPX1, GSTP1, HLA-A, HLA-B, LGALS2, LST1, LYZ, MALAT1, MS4A7, MT-ND2, NEAT1, RHOC, RP11-290F20.3, SAT1, B2M, FTH1, S100A11, ARPC2, PFN1, TMSB10, CD79B, CDKN1C, CKB, CTSL, HES4, SIGLEC10, ALDH2, HLA-C, VCAN, MT-ND4"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"community-sizes","dir":"Articles","previous_headings":"","what":"Community Sizes","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"Visualize community sizes.","code":"comm_sizes_df <- data.frame(   Community = paste(\"Community\", seq_along(sapply(large_communities, length))),   Size = sapply(large_communities, length) ) p_comm_sizes <- ggplot(comm_sizes_df, aes(x = Community, y = Size, fill = Community)) +   geom_bar(stat = \"identity\") +   labs(title = \"Community Sizes (C1)\", x = \"Community\", y = \"Size\") +   theme_minimal() +   theme(legend.position = \"none\") print(p_comm_sizes)"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"hub-genes-table-from-full-graph","dir":"Articles","previous_headings":"","what":"Hub Genes Table from Full Graph","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"Generate table top hub genes (degree) community using full graph. Cluster Community Top Hub Genes C1 Community 1 S100A8, HLA-DPA1, ATP5D, C19orf43, HNRNPA2B1, TALDO1, PSMA7, NPM1, EIF3K, NDUFA11 Community 2 S100A8, S100A9, IFITM2, LYZ, GPX1, YBX1, LST1, IFITM3, LGALS2, CEBPB identified top hub genes within community ranking nodes based degree centrality. Using summarize_hub_genes(), extracted key genes likely involved core regulatory processes. example, S100A8, ATP5D, HLA-DPA1 emerged central Community 1, S100A9, LYZ, IFITM2 prominent Community 2. hubs may serve key functional markers regulatory nodes cluster.","code":"summarize_hub_genes(graph_percentile, large_communities, cluster_name = \"C1\")"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"hub-genes","dir":"Articles","previous_headings":"","what":"Hub Genes","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"Identify top hub genes communities percolated graph. Cluster Community Top Hub Genes C1 Community 1 ATP5D, PSMA7, NEDD8, COPE, C19orf43, C11orf31, LSP1, UQCR11.1, ATP6V1F, EIF3G Community 2 S100A8, LYZ, S100A9, IFITM2, FCGR3A, LST1, FCER1G, GPX1, AIF1, LGALS2","code":"summarize_hub_genes(g_consensus, large_communities, cluster_name = \"C1\")"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"go-enrichment-analysis","dir":"Articles","previous_headings":"","what":"GO Enrichment Analysis","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"Perform enrichment communities filtering housekeeping genes tend -represented due high mi-scores","code":"# Perform enrichment enrich_results <- enrich_go(large_communities, ontology = \"BP\") ## Community 1 - Genes after filtering: 571  ## Community 2 - Genes after filtering: 93  ## Enrichment for Community 1 : ##                    ID                                            Description ## GO:0019882 GO:0019882                    antigen processing and presentation ## GO:0042773 GO:0042773               ATP synthesis coupled electron transport ## GO:0042775 GO:0042775 mitochondrial ATP synthesis coupled electron transport ## GO:0046034 GO:0046034                                  ATP metabolic process ##            GeneRatio   BgRatio       pvalue     p.adjust       qvalue ## GO:0019882    29/499 107/18800 1.587947e-21 5.355040e-18 3.867563e-18 ## GO:0042773    27/499  92/18800 3.905937e-21 5.355040e-18 3.867563e-18 ## GO:0042775    27/499  92/18800 3.905937e-21 5.355040e-18 3.867563e-18 ## GO:0046034    40/499 273/18800 1.128641e-18 3.094734e-16 2.235105e-16 ##                                                                                                                                                                                                                                                             geneID ## GO:0019882                                                       CD68/CD74/CTSD/CTSH/FGL2/HLA-DMA/HLA-DPA1/HLA-DPB1/HLA-DQA1/HLA-DRA/HLA-DRB1/HLA-DRB5/HLA-E/IFI30/PSMB8/PSME1/PYCARD/HLA-DMB/HLA-DQA2/HLA-DQB1/LILRB2/CALR/CTSS/FCER1G/HLA-A/HLA-B/B2M/CTSL/HLA-C ## GO:0042773                                                                       BID/CHCHD2/COX5A/COX5B/COX6A1/COX7A2L/COX7C/GHITM/NDUFA4/NDUFB10/NDUFB7/NDUFB9/NDUFS5/NDUFS7/PARK7/UQCR10/UQCRH/UQCRQ/UQCRFS1/NDUFS6/NDUFA1/NDUFB2/ISCU/NDUFB1/CYCS/NDUFA2/NDUFB4 ## GO:0042775                                                                       BID/CHCHD2/COX5A/COX5B/COX6A1/COX7A2L/COX7C/GHITM/NDUFA4/NDUFB10/NDUFB7/NDUFB9/NDUFS5/NDUFS7/PARK7/UQCR10/UQCRH/UQCRQ/UQCRFS1/NDUFS6/NDUFA1/NDUFB2/ISCU/NDUFB1/CYCS/NDUFA2/NDUFB4 ## GO:0046034 ALDOA/BID/CHCHD2/COX5A/COX5B/COX6A1/COX7A2L/COX7C/ENO1/FIS1/GHITM/HSPA8/LDHA/NDUFA4/NDUFB10/NDUFB7/NDUFB9/NDUFS5/NDUFS7/PARK7/PGK1/PKM/RHOA/TPI1/TSPO/UQCR10/UQCRH/UQCRQ/UQCRFS1/NDUFS6/UQCRC1/NDUFA1/NDUFB2/ISCU/COX7A2/NDUFB1/CYCS/NDUFA2/EIF6/NDUFB4 ##            Count ## GO:0019882    29 ## GO:0042773    27 ## GO:0042775    27 ## GO:0046034    40 ## Enrichment for Community 2 : ##                    ID ## GO:0048002 GO:0048002 ## GO:0001906 GO:0001906 ## GO:0002399 GO:0002399 ## GO:0002503 GO:0002503 ##                                                           Description GeneRatio ## GO:0048002     antigen processing and presentation of peptide antigen     11/87 ## GO:0001906                                               cell killing     11/87 ## GO:0002399                      MHC class II protein complex assembly      5/87 ## GO:0002503 peptide antigen assembly with MHC class II protein complex      5/87 ##              BgRatio       pvalue     p.adjust       qvalue ## GO:0048002  63/18800 5.488107e-15 1.003226e-11 7.798889e-12 ## GO:0001906 185/18800 9.094564e-10 2.078108e-07 1.615482e-07 ## GO:0002399  16/18800 7.927262e-09 1.449103e-06 1.126506e-06 ## GO:0002503  16/18800 7.927262e-09 1.449103e-06 1.126506e-06 ##                                                                              geneID ## GO:0048002 CTSS/FCER1G/HLA-A/HLA-B/B2M/CTSL/HLA-C/HLA-DRA/HLA-DMB/HLA-DQA2/HLA-DQB1 ## GO:0001906      FCGR3A/HLA-A/HLA-B/LYZ/B2M/CTSC/HLA-DRA/PTPN6/STXBP2/TYROBP/S100A12 ## GO:0002399                                    B2M/HLA-DRA/HLA-DMB/HLA-DQA2/HLA-DQB1 ## GO:0002503                                    B2M/HLA-DRA/HLA-DMB/HLA-DQA2/HLA-DQB1 ##            Count ## GO:0048002    11 ## GO:0001906    11 ## GO:0002399     5 ## GO:0002503     5 # Plot the top 4 terms per community dot_plot <- plot_go_terms(enrich_results, top_n_terms = 5, ontology = \"BP\") print(dot_plot) ## Save Results saveRDS(result, \"results.rds\") sessionInfo() ## R version 4.2.1 (2022-06-23) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Red Hat Enterprise Linux 9.4 (Plow) ##  ## Matrix products: default ## BLAS/LAPACK: /app1/ebapps/arches/flat-avx2/software/FlexiBLAS/3.2.0-GCC-11.3.0/lib64/libflexiblas.so.3.2 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] flextable_0.9.2       ggraph_2.0.5          miEdgeR_0.1.0         ##  [4] pheatmap_1.0.12       ggVennDiagram_1.2.3   ggpubr_0.4.0          ##  [7] org.Hs.eg.db_3.15.0   AnnotationDbi_1.58.0  IRanges_2.32.0        ## [10] S4Vectors_0.36.1      Biobase_2.56.0        BiocGenerics_0.44.0   ## [13] clusterProfiler_4.4.4 ggplot2_3.3.6         dplyr_1.1.4           ## [16] igraph_1.3.2          SeuratObject_4.1.3    Seurat_4.3.0          ##  ## loaded via a namespace (and not attached): ##   [1] rappdirs_0.3.3          scattermore_1.2         ragg_1.2.5              ##   [4] tidyr_1.2.0             bit64_4.0.5             knitr_1.50              ##   [7] irlba_2.3.5             data.table_1.14.2       KEGGREST_1.36.2         ##  [10] RCurl_1.98-1.7          generics_0.1.3          cowplot_1.1.1           ##  [13] RSQLite_2.2.14          shadowtext_0.1.2        RANN_2.6.1              ##  [16] future_1.26.1           bit_4.0.4               enrichplot_1.16.2       ##  [19] spatstat.data_3.0-0     xml2_1.3.3              httpuv_1.6.5            ##  [22] viridis_0.6.2           xfun_0.52               jquerylib_0.1.4         ##  [25] evaluate_0.15           promises_1.2.0.1        DBI_1.1.3               ##  [28] htmlwidgets_1.5.4       spatstat.geom_3.0-3     purrr_1.0.4             ##  [31] ellipsis_0.3.2          backports_1.4.1         fontLiberation_0.1.0    ##  [34] fontBitstreamVera_0.1.1 deldir_1.0-6            vctrs_0.6.5             ##  [37] ROCR_1.0-11             abind_1.4-5             cachem_1.0.6            ##  [40] withr_2.5.0             ggforce_0.3.3           RVenn_1.1.0             ##  [43] progressr_0.10.1        sctransform_0.4.1       treeio_1.20.2           ##  [46] goftest_1.2-3           cluster_2.1.3           DOSE_3.22.1             ##  [49] ape_5.6-2               lazyeval_0.2.2          crayon_1.5.1            ##  [52] crul_1.2.0              spatstat.explore_3.0-5  labeling_0.4.2          ##  [55] pkgconfig_2.0.3         tweenr_1.0.2            GenomeInfoDb_1.32.2     ##  [58] vipor_0.4.5             nlme_3.1-158            rlang_1.1.5             ##  [61] globals_0.15.0          lifecycle_1.0.4         miniUI_0.1.1.1          ##  [64] downloader_0.4          fontquiver_0.2.1        httpcode_0.3.0          ##  [67] ggrastr_1.0.1           rprojroot_2.0.3         polyclip_1.10-0         ##  [70] matrixStats_0.62.0      lmtest_0.9-40           graph_1.74.0            ##  [73] Matrix_1.5-3            aplot_0.1.9             carData_3.0-5           ##  [76] zoo_1.8-10              beeswarm_0.4.0          ggridges_0.5.3          ##  [79] png_0.1-7               viridisLite_0.4.0       bitops_1.0-7            ##  [82] KernSmooth_2.23-20      Biostrings_2.64.0       blob_1.2.3              ##  [85] stringr_1.4.0           qvalue_2.28.0           parallelly_1.32.0       ##  [88] spatstat.random_3.0-1   rstatix_0.7.0           gridGraphics_0.5-1      ##  [91] ggsignif_0.6.3          reactome.db_1.81.0      scales_1.2.0            ##  [94] memoise_2.0.1           graphite_1.42.0         magrittr_2.0.3          ##  [97] plyr_1.8.7              ica_1.0-2               zlibbioc_1.42.0         ## [100] compiler_4.2.1          scatterpie_0.1.8        RColorBrewer_1.1-3      ## [103] fitdistrplus_1.1-8      cli_3.6.4               XVector_0.36.0          ## [106] listenv_0.8.0           patchwork_1.1.1         pbapply_1.5-0           ## [109] MASS_7.3-57             tidyselect_1.2.1        stringi_1.7.6           ## [112] textshaping_0.3.6       yaml_2.3.10             GOSemSim_2.22.0         ## [115] askpass_1.1             ggrepel_0.9.1           grid_4.2.1              ## [118] sass_0.4.10             fastmatch_1.1-3         tools_4.2.1             ## [121] future.apply_1.9.0      parallel_4.2.1          rstudioapi_0.13         ## [124] uuid_1.1-0              gridExtra_2.3           farver_2.1.0            ## [127] Rtsne_0.16              digest_0.6.29           shiny_1.7.1             ## [130] gfonts_0.2.0            Rcpp_1.0.8.3            car_3.1-0               ## [133] broom_0.8.0             infotheo_1.2.0.1        later_1.3.0             ## [136] RcppAnnoy_0.0.20        httr_1.4.3              gdtools_0.3.3           ## [139] colorspace_2.0-3        fs_1.5.2                tensor_1.5              ## [142] reticulate_1.25         splines_4.2.1           uwot_0.1.14             ## [145] yulab.utils_0.2.0       tidytree_0.4.1          spatstat.utils_3.1-3    ## [148] pkgdown_2.1.1           graphlayouts_0.8.0      sp_1.5-1                ## [151] ggplotify_0.1.0         plotly_4.10.0           systemfonts_1.0.4       ## [154] xtable_1.8-4            jsonlite_1.8.0          ggtree_3.4.4            ## [157] tidygraph_1.2.1         ggfun_0.1.8             R6_2.5.1                ## [160] pillar_1.10.1           htmltools_0.5.8.1       mime_0.12               ## [163] glue_1.6.2              fastmap_1.2.0           BiocParallel_1.32.5     ## [166] codetools_0.2-18        fgsea_1.22.0            lattice_0.20-45         ## [169] bslib_0.9.0             spatstat.sparse_3.0-0   tibble_3.2.1            ## [172] ggbeeswarm_0.6.0        curl_6.2.2              leiden_0.4.2            ## [175] ReactomePA_1.40.0       officer_0.6.2           zip_2.2.0               ## [178] GO.db_3.15.0            openssl_2.0.2           survival_3.3-1          ## [181] rmarkdown_2.29          desc_1.4.1              munsell_0.5.0           ## [184] DO.db_2.9               GenomeInfoDbData_1.2.8  reshape2_1.4.4          ## [187] gtable_0.3.0"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About this vignette","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"tutorial demonstrates incorporate pseudotime information mutual-information (MI) network analysis using miEdgeR. bin cells along trajectory, build MI networks per bin, detect communities, track dynamic changes modules, hub genes, enrichment across pseudotime.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites:","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"R (≥ 4.2.0) Seurat object containing cluster metadata (RNA_snn_res.0.2) numeric pseudotime column Packages: miEdgeR, Seurat, igraph, clusterProfiler, org.Hs.eg.db, ggplot2, ggraph, flextable, pheatmap","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"extend MI-network workflow leveraging single-cell pseudotime. generating pseudotime vector, bin cells discrete stages, compute MI networks bin, analyze community structure, hub genes, functional enrichment evolve along trajectory.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"load-libraries-and-data","dir":"Articles","previous_headings":"","what":"Load Libraries and Data","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Load dependencies read preprocessed Seurat object. Ensure object includes clustering pseudotime metadata.","code":"library(Seurat) library(miEdgeR) library(igraph) library(clusterProfiler) library(org.Hs.eg.db) library(dplyr) library(ggplot2) library(ggraph) library(flextable) library(pheatmap)  seurat_obj <- readRDS('pbmc3k.rds')"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"generate-or-verify-pseudotime","dir":"Articles","previous_headings":"","what":"Generate or Verify Pseudotime","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"generate mock pseudotime cluster 1 plot distribution.","code":"set.seed(123) cluster_1_cells <- colnames(seurat_obj)[seurat_obj@meta.data$RNA_snn_res.0.1 == \"1\"] mock_pseudotime <- numeric(ncol(seurat_obj)) names(mock_pseudotime) <- colnames(seurat_obj) mock_pseudotime[cluster_1_cells] <- seq(0, 1, length.out = length(cluster_1_cells)) other_cells <- setdiff(colnames(seurat_obj), cluster_1_cells) mock_pseudotime[other_cells] <- runif(length(other_cells), 0, 1) seurat_obj@meta.data$pseudotime <- mock_pseudotime[match(rownames(seurat_obj@meta.data), names(mock_pseudotime))] p_pt <- ggplot(data.frame(pseudotime = seurat_obj@meta.data[cluster_1_cells, \"pseudotime\"]), aes(x = pseudotime)) +   geom_histogram(bins = 30, fill = \"#f56642\", color = \"black\") +   labs(title = \"Pseudotime Distribution for Cluster 1\", x = \"Pseudotime\", y = \"Cell Count\") +   theme_minimal() print(p_pt)"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"compute-pseudotime-mi-networks","dir":"Articles","previous_headings":"","what":"Compute Pseudotime MI Networks","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"pseudotime bin (3 bins), extract cells, filter top variable genes, compute MI parallel, build thresholded igraph objects.","code":"pt_results <- miEdgeR::compute_pseudotime_mi_network(   seurat_obj,   cluster_id = \"1\",   cluster_field = \"RNA_snn_res.0.1\",   pseudotime_col = \"pseudotime\",   assay_name = \"RNA\",   counts_layer = \"counts\",   data_layer = \"data\",   min_expr_pct = 0.05,   top_n_genes = 3000,   min_cells_bin = 50,   n_bins = 3, ## set the number of pseudotime bins   n_cores = 65 ) ## Using adaptive nbins = 5  ## Using adaptive nbins = 5  ## Using adaptive nbins = 5 cat(\"Valid bins:\", sum(!sapply(pt_results, is.null)), \"\\n\") ## Valid bins: 3"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"summarize-bin-graphs","dir":"Articles","previous_headings":"","what":"Summarize Bin Graphs","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Quick summary node edge counts density per bin assess network complexity pseudotime. bins yielded valid networks consistent structure (2911 genes, ~211K edges, density ≈ 0.05), indicating stable co-regulatory patterns across pseudotime stages Cluster 1.","code":"for (bin in names(pt_results)) {   if (!is.null(pt_results[[bin]])) {     cat(\"Bin\", bin, \"- Vertices:\", igraph::vcount(pt_results[[bin]]), \"\\n\")     cat(\"Bin\", bin, \"- Edges:\", igraph::ecount(pt_results[[bin]]), \"\\n\")     cat(\"Bin\", bin, \"- Density:\", igraph::graph.density(pt_results[[bin]]), \"\\n\")   } else {     cat(\"Bin\", bin, \"- Skipped (insufficient cells)\\n\")   } } ## Bin PT1 - Vertices: 2911  ## Bin PT1 - Edges: 211806  ## Bin PT1 - Density: 0.05000726  ## Bin PT2 - Vertices: 2911  ## Bin PT2 - Edges: 211825  ## Bin PT2 - Density: 0.05001175  ## Bin PT3 - Vertices: 2911  ## Bin PT3 - Edges: 211818  ## Bin PT3 - Density: 0.05001009"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"community-detection","dir":"Articles","previous_headings":"","what":"Community Detection","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Detect robust gene modules per bin percolation (noise filtering) followed Leiden clustering neighborhood-overlap expansion. applied detect_communities_across_bins() identify stable gene communities across pseudotime bins. bin’s consensus MI network revealed large co-expression modules, Bin PT1 showing one major community (size: 1017), Bins PT2 PT3 displayed two communities (sizes: 957/590 970/694, respectively). suggests dynamic reorganization gene modules pseudotime progression Cluster 1.","code":"comm_results <- detect_communities_across_bins(   pt_results,   min_size = 50,   n_iterations = 100,   edge_fraction = 0.6,   freq_threshold = 0.5,   percentile = 0.95,   resolution_parameter = 0.5,   overlap_threshold = 0.1 ) ## Bin PT1 - Communities (size >= 50 ): 1  ## Sizes: 1017  ## Bin PT2 - Communities (size >= 50 ): 2  ## Sizes: 957 590  ## Bin PT3 - Communities (size >= 50 ): 2  ## Sizes: 970 694"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"community-sizes","dir":"Articles","previous_headings":"","what":"Community Sizes","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Bar plot showing module sizes vary across pseudotime bins.","code":"comm_sizes_df <- bind_rows(lapply(comm_results, function(res) {   data.frame(Bin = res$bin, Community = paste(\"Group\", seq_along(res$sizes)), Size = res$sizes) })) p_comm_sizes <- ggplot(comm_sizes_df, aes(x = Bin, y = Size, fill = Community)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   labs(title = \"Community Sizes Across Pseudotime Bins (C5)\", x = \"Pseudotime Bin\", y = \"Community Size\") +   theme_minimal() print(p_comm_sizes)"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"go-enrichment","dir":"Articles","previous_headings":"","what":"GO Enrichment","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Perform enrichment communities filtering housekeeping genes tend -represented due high mi-scores","code":"library(DOSE) enrich_results <- enrich_go(comm_results,semantic_space = 'GO',ontology = 'BP') ## Community 1 in bin PT1 - Genes after filtering: 1017  ## Community 1 in bin PT2 - Genes after filtering: 957  ## Community 2 in bin PT2 - Genes after filtering: 590  ## Community 1 in bin PT3 - Genes after filtering: 970  ## Community 2 in bin PT3 - Genes after filtering: 694  ## Enrichment for PT1_Group_1 : ##                    ID                                            Description ## GO:0022904 GO:0022904                   respiratory electron transport chain ## GO:0042773 GO:0042773               ATP synthesis coupled electron transport ## GO:0042775 GO:0042775 mitochondrial ATP synthesis coupled electron transport ## GO:0046034 GO:0046034                                  ATP metabolic process ##            GeneRatio   BgRatio       pvalue     p.adjust       qvalue ## GO:0022904    45/891 113/18800 3.031250e-30 7.886921e-27 5.938203e-27 ## GO:0042773    41/891  92/18800 4.949950e-30 7.886921e-27 5.938203e-27 ## GO:0042775    41/891  92/18800 4.949950e-30 7.886921e-27 5.938203e-27 ## GO:0046034    59/891 273/18800 3.464913e-23 1.656228e-20 1.247004e-20 ##                                                                                                                                                                                                                                                                                                                                                                                             geneID ## GO:0022904                                                                                    BID/CHCHD2/COX4I1/COX5A/COX5B/COX6A1/COX7A2L/COX7C/DGUOK/GHITM/ISCU/NDUFA1/NDUFA4/NDUFB1/NDUFB10/NDUFB2/NDUFB5/NDUFB7/NDUFB9/NDUFS5/NDUFS7/NDUFV2/PARK7/SDHB/SOD2/UQCR10/UQCRFS1/UQCRH/NDUFB4/NDUFC2/NDUFS6/CYCS/NDUFA3/SDHD/UQCRQ/ETFB/NDUFS8/NDUFA6/DNAJC15/NDUFS3/SCO2/NDUFA2/NDUFS2/SDHC/NDUFAB1 ## GO:0042773                                                                                                        BID/CHCHD2/COX4I1/COX5A/COX5B/COX6A1/COX7A2L/COX7C/DGUOK/GHITM/ISCU/NDUFA1/NDUFA4/NDUFB1/NDUFB10/NDUFB2/NDUFB5/NDUFB7/NDUFB9/NDUFS5/NDUFS7/NDUFV2/PARK7/UQCR10/UQCRFS1/UQCRH/NDUFB4/NDUFC2/NDUFS6/CYCS/NDUFA3/SDHD/UQCRQ/NDUFS8/NDUFA6/DNAJC15/NDUFS3/NDUFA2/NDUFS2/SDHC/NDUFAB1 ## GO:0042775                                                                                                        BID/CHCHD2/COX4I1/COX5A/COX5B/COX6A1/COX7A2L/COX7C/DGUOK/GHITM/ISCU/NDUFA1/NDUFA4/NDUFB1/NDUFB10/NDUFB2/NDUFB5/NDUFB7/NDUFB9/NDUFS5/NDUFS7/NDUFV2/PARK7/UQCR10/UQCRFS1/UQCRH/NDUFB4/NDUFC2/NDUFS6/CYCS/NDUFA3/SDHD/UQCRQ/NDUFS8/NDUFA6/DNAJC15/NDUFS3/NDUFA2/NDUFS2/SDHC/NDUFAB1 ## GO:0046034 BID/CHCHD10/CHCHD2/COX4I1/COX5A/COX5B/COX6A1/COX7A2/COX7A2L/COX7C/DGUOK/EIF6/ENO1/FIS1/GHITM/HSPA8/ISCU/LDHA/NDUFA1/NDUFA4/NDUFB1/NDUFB10/NDUFB2/NDUFB5/NDUFB7/NDUFB9/NDUFS5/NDUFS7/NDUFV2/PARK7/PGAM1/PGK1/PKM/RHOA/TGFB1/TPI1/TSPO/UQCR10/UQCRC1/UQCRFS1/UQCRH/NDUFB4/NDUFC2/NDUFS6/CYCS/NDUFA3/SDHD/UQCRQ/TREX1/UQCRC2/NDUFS8/NDUFA6/DNAJC15/NDUFS3/NDUFA2/NDUFS2/ALDOA/SDHC/NDUFAB1 ##            Count ## GO:0022904    45 ## GO:0042773    41 ## GO:0042775    41 ## GO:0046034    59 ## Enrichment for PT2_Group_1 : ##                    ID                          Description GeneRatio   BgRatio ## GO:0022904 GO:0022904 respiratory electron transport chain    41/832 113/18800 ## GO:0019882 GO:0019882  antigen processing and presentation    36/832 107/18800 ## GO:0046034 GO:0046034                ATP metabolic process    56/832 273/18800 ## GO:0002396 GO:0002396         MHC protein complex assembly    14/832  20/18800 ##                  pvalue     p.adjust       qvalue ## GO:0022904 6.164300e-27 2.928659e-23 2.186704e-23 ## GO:0019882 1.673296e-22 8.833145e-20 6.595331e-20 ## GO:0046034 2.487528e-22 1.181825e-19 8.824180e-20 ## GO:0002396 3.007261e-15 7.143747e-13 5.333931e-13 ##                                                                                                                                                                                                                                                                                                                                                                      geneID ## GO:0022904                                                                                          BID/CHCHD2/COX5A/COX5B/COX6A1/COX7A2L/COX7C/DGUOK/GHITM/ISCU/NDUFA2/NDUFA4/NDUFB10/NDUFB2/NDUFB5/NDUFB7/NDUFB9/NDUFS3/NDUFS5/NDUFS7/NDUFV2/PARK7/SDHB/SDHD/SOD2/UQCR10/UQCRFS1/UQCRH/UQCRQ/NDUFS8/NDUFA1/NDUFB4/NDUFA3/COX4I1/SCO2/NDUFA12/ETFB/CYC1/NDUFC2/SDHC/NDUFS6 ## GO:0019882                                                                                                                      CALR/CD68/CD74/CTSD/CTSH/HLA-A/HLA-B/HLA-DMA/HLA-DPA1/HLA-DPB1/HLA-DQA1/HLA-DQB1/HLA-DRA/HLA-DRB1/HLA-DRB5/HLA-E/HLA-F/IFI30/PDIA3/PSMB8/PSME1/PYCARD/TAPBP/WAS/FGL2/HLA-DMB/HLA-DQA2/SLC11A1/RAB10/CTSS/FCER1G/HLA-C/LILRB2/B2M/TREX1/CTSL ## GO:0046034 ALDOA/BID/CHCHD2/COX5A/COX5B/COX6A1/COX7A2/COX7A2L/COX7C/DGUOK/ENO1/FIS1/GHITM/HSPA8/ISCU/LDHA/NDUFA2/NDUFA4/NDUFB10/NDUFB2/NDUFB5/NDUFB7/NDUFB9/NDUFS3/NDUFS5/NDUFS7/NDUFV2/PARK7/PGAM1/PGK1/PKM/RHOA/SDHD/TGFB1/TPI1/UQCR10/UQCRC1/UQCRFS1/UQCRH/UQCRQ/CHCHD10/EIF6/NDUFS8/NDUFA1/NDUFB4/NDUFA3/NCOR1/COX4I1/NDUFA12/UQCRC2/CYC1/NDUFC2/SDHC/NDUFS6/TSPO/TREX1 ## GO:0002396                                                                                                                                                                                                                                                      CALR/HLA-DMA/HLA-DPA1/HLA-DPB1/HLA-DQA1/HLA-DQB1/HLA-DRA/HLA-DRB1/HLA-DRB5/PDIA3/TAPBP/HLA-DMB/HLA-DQA2/B2M ##            Count ## GO:0022904    41 ## GO:0019882    36 ## GO:0046034    56 ## GO:0002396    14 ## Enrichment for PT2_Group_2 : ##                    ID                         Description GeneRatio   BgRatio ## GO:0019882 GO:0019882 antigen processing and presentation    33/525 107/18800 ## GO:0045333 GO:0045333                cellular respiration    35/525 231/18800 ## GO:0050863 GO:0050863     regulation of T cell activation    40/525 342/18800 ## GO:0002396 GO:0002396        MHC protein complex assembly    12/525  20/18800 ##                  pvalue     p.adjust       qvalue ## GO:0019882 1.217336e-25 4.959429e-22 3.851909e-22 ## GO:0045333 2.873605e-16 1.463383e-13 1.136586e-13 ## GO:0050863 1.763186e-14 6.400725e-12 4.971341e-12 ## GO:0002396 2.042450e-14 6.400725e-12 4.971341e-12 ##                                                                                                                                                                                                                                                                                  geneID ## GO:0019882                                                  CTSS/FCER1G/HLA-C/LILRB2/B2M/TREX1/CTSL/CD74/CTSD/CTSH/HLA-A/HLA-B/HLA-DMA/HLA-DPA1/HLA-DPB1/HLA-DQA1/HLA-DQB1/HLA-DRA/HLA-DRB1/HLA-DRB5/HLA-E/HLA-F/IFI30/PDIA3/PSMB8/PSME1/PYCARD/WAS/FGL2/HLA-DMB/HLA-DQA2/SLC11A1/RAB10 ## GO:0045333                                                  TREX1/MDH2/MDH1/IDH2/ISCU/NDUFB10/NDUFB2/NDUFB5/NDUFB9/OXA1L/PARK7/PRELID1/RHOA/SDHB/SDHD/SOD2/UQCR10/UQCRC1/UQCRFS1/UQCRH/UQCRQ/CHCHD10/CAT/NDUFS8/NDUFA1/NDUFB4/COX4I1/SUCLG1/SCO2/NDUFA12/UQCRC2/CYC1/NDUFC2/SDHC/NDUFS6 ## GO:0050863 AIF1/LILRB1/LILRB2/SPN/B2M/LGALS1/TREX1/ADA/RUNX3/CD74/CEBPB/CORO1A/HLA-A/HLA-DMA/HLA-DPA1/HLA-DPB1/HLA-DQA1/HLA-DQB1/HLA-DRA/HLA-DRB1/HLA-DRB5/HLA-E/LGALS3/LGALS9/LYN/NFKBIZ/PRELID1/PTPN6/PTPRC/PYCARD/RAC2/RHOA/SOD1/TNFRSF1B/TNFSF13B/IRF1/FGL2/CD300A/HLA-DMB/HLA-DQA2 ## GO:0002396                                                                                                                                                                             B2M/HLA-DMA/HLA-DPA1/HLA-DPB1/HLA-DQA1/HLA-DQB1/HLA-DRA/HLA-DRB1/HLA-DRB5/PDIA3/HLA-DMB/HLA-DQA2 ##            Count ## GO:0019882    33 ## GO:0045333    35 ## GO:0050863    40 ## GO:0002396    12 ## Enrichment for PT3_Group_1 : ##                    ID                                            Description ## GO:0042773 GO:0042773               ATP synthesis coupled electron transport ## GO:0042775 GO:0042775 mitochondrial ATP synthesis coupled electron transport ## GO:0019882 GO:0019882                    antigen processing and presentation ## GO:0046034 GO:0046034                                  ATP metabolic process ##            GeneRatio   BgRatio       pvalue     p.adjust       qvalue ## GO:0042773    39/847  92/18800 1.962503e-28 4.733558e-25 3.503585e-25 ## GO:0042775    39/847  92/18800 1.962503e-28 4.733558e-25 3.503585e-25 ## GO:0019882    36/847 107/18800 3.047327e-22 1.633367e-19 1.208951e-19 ## GO:0046034    56/847 273/18800 5.858412e-22 2.826098e-19 2.091762e-19 ##                                                                                                                                                                                                                                                                                                                                                                       geneID ## GO:0042773                                                                                                   BID/CHCHD2/COX4I1/COX5A/COX5B/COX6A1/COX7A2L/COX7C/CYC1/CYCS/ISCU/NDUFA1/NDUFA4/NDUFB1/NDUFB10/NDUFB2/NDUFB4/NDUFB9/NDUFC2/NDUFS5/NDUFS7/PARK7/UQCR10/UQCRFS1/UQCRH/NDUFA3/NDUFAB1/NDUFS6/SDHC/NDUFV2/UQCRQ/DGUOK/GHITM/NDUFB7/SDHD/NDUFA2/NDUFS8/NDUFB5/NDUFS2 ## GO:0042775                                                                                                   BID/CHCHD2/COX4I1/COX5A/COX5B/COX6A1/COX7A2L/COX7C/CYC1/CYCS/ISCU/NDUFA1/NDUFA4/NDUFB1/NDUFB10/NDUFB2/NDUFB4/NDUFB9/NDUFC2/NDUFS5/NDUFS7/PARK7/UQCR10/UQCRFS1/UQCRH/NDUFA3/NDUFAB1/NDUFS6/SDHC/NDUFV2/UQCRQ/DGUOK/GHITM/NDUFB7/SDHD/NDUFA2/NDUFS8/NDUFB5/NDUFS2 ## GO:0019882                                                                                                                        CD68/CD74/CTSD/CTSH/FGL2/HLA-A/HLA-C/HLA-DMA/HLA-DPA1/HLA-DPB1/HLA-DQA1/HLA-DQA2/HLA-DQB1/HLA-DRA/HLA-DRB1/HLA-DRB5/HLA-E/HLA-F/IFI30/LILRB2/PSMB8/PSME1/PYCARD/RAB10/RAB32/SLC11A1/WAS/HLA-B/HLA-DMB/CALR/PDIA3/TAP1/CTSS/FCER1G/B2M/CTSL ## GO:0046034 ALDOA/BID/CHCHD10/CHCHD2/COX4I1/COX5A/COX5B/COX6A1/COX7A2/COX7A2L/COX7C/CYC1/CYCS/ENO1/FIS1/HSPA8/ISCU/LDHA/NDUFA1/NDUFA4/NDUFB1/NDUFB10/NDUFB2/NDUFB4/NDUFB9/NDUFC2/NDUFS5/NDUFS7/PARK7/PGAM1/PGK1/PKM/RHOA/TPI1/UQCR10/UQCRC2/UQCRFS1/UQCRH/NDUFA3/NDUFAB1/TGFB1/NDUFS6/SDHC/NDUFV2/UQCRQ/DGUOK/GHITM/NDUFB7/SDHD/UQCRC1/NCOR1/NDUFA2/NDUFS8/NDUFB5/NDUFS2/TSPO ##            Count ## GO:0042773    39 ## GO:0042775    39 ## GO:0019882    36 ## GO:0046034    56 ## Enrichment for PT3_Group_2 : ##                    ID                                      Description ## GO:0019882 GO:0019882              antigen processing and presentation ## GO:0022904 GO:0022904             respiratory electron transport chain ## GO:0046034 GO:0046034                            ATP metabolic process ## GO:0033108 GO:0033108 mitochondrial respiratory chain complex assembly ##            GeneRatio   BgRatio       pvalue     p.adjust       qvalue ## GO:0019882    34/616 107/18800 1.354942e-24 6.066077e-21 4.622493e-21 ## GO:0022904    32/616 113/18800 1.720275e-21 2.567224e-18 1.956285e-18 ## GO:0046034    42/616 273/18800 5.208031e-17 1.457272e-14 1.110475e-14 ## GO:0033108    25/616  94/18800 2.341378e-16 5.823528e-14 4.437664e-14 ##                                                                                                                                                                                                                                                                             geneID ## GO:0019882                                         CTSS/FCER1G/B2M/CTSL/CD74/CTSD/CTSH/FGL2/HLA-A/HLA-C/HLA-DMA/HLA-DPA1/HLA-DPB1/HLA-DQA1/HLA-DQA2/HLA-DQB1/HLA-DRA/HLA-DRB1/HLA-DRB5/HLA-E/IFI30/LILRB2/PSMB8/PSME1/PYCARD/RAB10/RAB32/SLC11A1/WAS/HLA-B/HLA-DMB/CALR/PDIA3/TAP1 ## GO:0022904                                                          BID/COX4I1/ISCU/NDUFA1/NDUFA4/NDUFB1/NDUFB10/NDUFB2/NDUFB4/NDUFB9/NDUFC2/NDUFS5/NDUFS7/PARK7/SOD2/UQCR10/UQCRFS1/UQCRH/SDHB/NDUFA3/NDUFAB1/SDHC/NDUFV2/UQCRQ/DGUOK/SCO2/GHITM/NDUFB7/SDHD/NDUFA2/NDUFS8/NDUFS2 ## GO:0046034 TSPO/BID/COX4I1/FIS1/HSPA8/ISCU/LDHA/NDUFA1/NDUFA4/NDUFB1/NDUFB10/NDUFB2/NDUFB4/NDUFB9/NDUFC2/NDUFS5/NDUFS7/PARK7/PGAM1/PGK1/PKM/RHOA/TPI1/UQCR10/UQCRC2/UQCRFS1/UQCRH/NDUFA3/NDUFAB1/TGFB1/SDHC/NDUFV2/UQCRQ/DGUOK/GHITM/NDUFB7/SDHD/UQCRC1/NCOR1/NDUFA2/NDUFS8/NDUFS2 ## GO:0033108                                                                                        COX14/NDUFA1/NDUFA11/NDUFA13/NDUFB1/NDUFB10/NDUFB11/NDUFB2/NDUFB4/NDUFB9/NDUFC2/NDUFS5/NDUFS7/UQCRFS1/NDUFA3/NDUFAB1/COX17/SCO2/NDUFB7/NDUFAF3/NDUFA2/NDUFS8/OXA1L/NDUFS2/PET100 ##            Count ## GO:0019882    34 ## GO:0022904    32 ## GO:0046034    42 ## GO:0033108    25 # Plot the top 4 terms per community dot_plot <- plot_go_terms(enrich_results, top_n_terms = 5, ontology = \"BP\") print(dot_plot) ## Save Results"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"hub-gene-changes-across-pseudotime","dir":"Articles","previous_headings":"","what":"Hub Gene Changes Across Pseudotime","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Identify top hub genes module tabulate presence across bins. Hub Gene Bins Present Communities CAPZB PT1 Group 1 HIGD2A PT3, PT3 Group 1, Group 2 HLA-DPA1 PT3, PT3 Group 1, Group 2 HLA-DRB5 PT1, PT2 Group 1, Group 2 ITGB2 PT2 Group 1 LSP1 PT3 Group 1 MYL12B PT3 Group 2 NEDD8 PT2, PT2 Group 1, Group 2 NPM1 PT3, PT3 Group 1, Group 2 PSMA7 PT2, PT2 Group 1, Group 2 S100A8 PT1, PT2, PT2, PT3, PT3 Group 1, Group 2 S100A9 PT1 Group 1 SLC25A3 PT1 Group 1 TMA7 PT2 Group 1 UBB PT2 Group 2","code":"hub_changes <- bind_rows(lapply(comm_results, function(res) {   bin <- res$bin   hub_data <- lapply(seq_along(res$communities), function(i) {     genes <- res$communities[[i]]     subgraph <- igraph::induced_subgraph(pt_results[[bin]], igraph::V(pt_results[[bin]])[name %in% genes])     if (igraph::vcount(subgraph) == 0) return(NULL)     deg <- igraph::degree(subgraph)     top_hubs <- names(sort(deg, decreasing = TRUE))[1:min(5, length(deg))]     data.frame(Bin = bin, Community = paste(\"Group\", i), Hub_Gene = top_hubs, stringsAsFactors = FALSE)   })   do.call(rbind, hub_data) }))  # Visualize hub gene presence across bins hub_presence <- hub_changes %>%   group_by(Hub_Gene) %>%   summarise(Bins_Present = paste(Bin, collapse = \", \"), Communities = paste(unique(Community), collapse = \", \"), .groups = \"drop\") ft_hub <- flextable::flextable(hub_presence) %>%   flextable::autofit() %>%   flextable::set_header_labels(Hub_Gene = \"Hub Gene\", Bins_Present = \"Bins Present\", Communities = \"Communities\") %>%   flextable::bg(part = \"header\", bg = \"gray\") %>%   flextable::theme_vanilla() ft_hub"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"hub-genes","dir":"Articles","previous_headings":"","what":"Hub Genes","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Identify top hub genes communities pseudotime bin. Bin Group Top Hub Genes PT1 Group 1 S100A8, HLA-DRB5, S100A9, CAPZB, SLC25A3, RHOG, UBE2D3, NDUFA11, ATP6V0E1, BST2 PT2 Group 1 S100A8, PSMA7, NEDD8, TMA7, ITGB2, UBB, SSR4, LGALS9, HLA-DRB5, CSTB Group 2 S100A8, PSMA7, NEDD8, UBB, HLA-DRB5, ITGB2, TMA7, SSR4, LGALS9, HLA-DPA1 PT3 Group 1 HLA-DPA1, NPM1, S100A8, HIGD2A, LSP1, MYL12B, ATP5D, C11orf31, CIRBP, SPI1 Group 2 HLA-DPA1, NPM1, S100A8, HIGD2A, MYL12B, SPI1, LSP1, S100A9, CD74, SLC25A5","code":"ft <- summarize_hub_genes_across_bins(comm_results, pt_results, top_n = 10) ft"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"edge-gainloss-analysis","dir":"Articles","previous_headings":"","what":"Edge Gain/Loss Analysis","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Compare stable, gained, lost edges consecutive pseudotime bins.  explore dynamic gene interactions, used plot_edge_gain_loss() quantify visualize stable, gained, lost edges consecutive pseudotime bins. function returns summary plot detailed edge lists transition. example, PT1→PT2, 120K edges gained lost, ~87K remained stable. Exported edge tables (e.g., ‘gained_edges_PT1_to_PT2.csv’) can used downstream analysis context-specific co-regulation.","code":"result <- plot_edge_gain_loss(pt_results, cluster_id = \"C1\") ## Edges in PT1 : 211806  ## Edges in PT2 : 211825  ## Stable edges ( PT1 to PT2 ): 87964  ## Gained edges ( PT1 to PT2 ): 123861  ## Lost edges ( PT1 to PT2 ): 123842  ## Edges in PT2 : 211825  ## Edges in PT3 : 211818  ## Stable edges ( PT2 to PT3 ): 91598  ## Gained edges ( PT2 to PT3 ): 120220  ## Lost edges ( PT2 to PT3 ): 120227 p_gl <- result$plot  # Correct assignment print(p_gl) # Inspect specific edges (e.g., for PT1 to PT2) pt1_to_pt2_edges <- result$edge_details[[\"PT1 to PT2\"]] cat(\"Gained edges (PT1 to PT2):\\n\") ## Gained edges (PT1 to PT2): if (!is.null(pt1_to_pt2_edges$gained)) {   print(head(pt1_to_pt2_edges$gained, 10))   write.csv(pt1_to_pt2_edges$gained, \"gained_edges_PT1_to_PT2.csv\", row.names = FALSE) } else {   cat(\"No gained edges found.\\n\") } ##    edge_changes$gained ## 1          CCL3_S100A8 ## 2        MT-CO2_S100A8 ## 3         S100A8_ZFP36 ## 4       MT-ATP6_S100A8 ## 5          LY6E_S100A8 ## 6     LINC00936_S100A8 ## 7      C1orf162_S100A8 ## 8         ANXA2_S100A8 ## 9       NDUFA13_S100A8 ## 10         CD63_S100A8 cat(\"Lost edges (PT1 to PT2):\\n\") ## Lost edges (PT1 to PT2): if (!is.null(pt1_to_pt2_edges$lost)) {   print(head(pt1_to_pt2_edges$lost, 10))   write.csv(pt1_to_pt2_edges$lost, \"lost_edges_PT1_to_PT2.csv\", row.names = FALSE) } else {   cat(\"No lost edges found.\\n\") } ##    edge_changes$lost ## 1      S100A8_STXBP2 ## 2        GPX4_S100A8 ## 3        GMFG_S100A8 ## 4       S100A8_SF3B5 ## 5        EMP3_S100A8 ## 6       CNPY3_S100A8 ## 7        CD37_S100A8 ## 8     S100A8_WDR83OS ## 9       S100A8_UQCRH ## 10    ANAPC16_S100A8 cat(\"Stable edges (PT1 to PT2):\\n\") ## Stable edges (PT1 to PT2): if (!is.null(pt1_to_pt2_edges$stable)) {   print(head(pt1_to_pt2_edges$stable, 10))   write.csv(pt1_to_pt2_edges$stable, \"stable_edges_PT1_to_PT2.csv\", row.names = FALSE) } else {   cat(\"No stable edges found.\\n\") } ##    edge_changes$stable ## 1        S100A8_S100A9 ## 2        FCGR3A_S100A8 ## 3        LGALS2_S100A8 ## 4      HLA-DPB1_S100A8 ## 5        IFITM2_S100A8 ## 6        IFITM3_S100A8 ## 7      HLA-DPA1_S100A8 ## 8          FCN1_S100A8 ## 9          GPX1_S100A8 ## 10       NFKBIA_S100A8 # Repeat for PT2 to PT3 pt2_to_pt3_edges <- result$edge_details[[\"PT2 to PT3\"]] cat(\"Gained edges (PT2 to PT3):\\n\") ## Gained edges (PT2 to PT3): if (!is.null(pt2_to_pt3_edges$gained)) {   print(head(pt2_to_pt3_edges$gained, 10))   write.csv(pt2_to_pt3_edges$gained, \"gained_edges_PT2_to_PT3.csv\", row.names = FALSE) } else {   cat(\"No gained edges found.\\n\") } ##    edge_changes$gained ## 1        MT-ND2_S100A8 ## 2        S100A8_STXBP2 ## 3          EMP3_S100A8 ## 4          GPX4_S100A8 ## 5         ALDH2_S100A8 ## 6        EIF4A1_S100A8 ## 7         CLIC1_S100A8 ## 8          GMFG_S100A8 ## 9         S100A8_SF3B5 ## 10        CNPY3_S100A8"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"gene-pseudotime-correlation-density","dir":"Articles","previous_headings":"","what":"Gene-Pseudotime Correlation Density","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Plot distribution gene expression–pseudotime correlations gauge overall trends.","code":"gc_df <- gene_pt_correlation(   seurat_obj[, seurat_obj@meta.data$RNA_snn_res.0.1 == \"1\"],   pseudotime_col = \"pseudotime\", assay = \"RNA\", layer = \"data\", method = \"spearman\" ) %>% mutate(Cluster = \"C1\") p_gc <- ggplot(gc_df, aes(x = Cor, color = Cluster, fill = Cluster)) +   geom_density(alpha = 0.3, color = \"#00B6EB\", fill = \"#00B6EB\") +   labs(title = \"Gene-Pseudotime Correlation Density\", x = \"Spearman ρ\", y = \"Density\") +   theme_minimal() print(p_gc)"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"top-10-genes-by-correlation","dir":"Articles","previous_headings":"","what":"Top ±10 Genes by Correlation","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Plot top 10 positively negatively correlated genes.","code":"top_genes_df <- gc_df %>%   filter(!is.na(Cor)) %>%   slice_max(Cor, n = 10) %>%   mutate(Direction = \"Positive\") %>%   bind_rows(     gc_df %>% filter(!is.na(Cor)) %>% slice_min(Cor, n = 10) %>% mutate(Direction = \"Negative\")   ) %>%   mutate(Gene = factor(Gene, levels = unique(Gene))) p_top_genes <- ggplot(top_genes_df, aes(x = Cor, y = Gene, fill = Direction)) +   geom_col(show.legend = FALSE) +   facet_grid(Direction ~ Cluster, scales = \"free_y\") +   labs(title = \"Top ±10 Genes by Pseudotime Correlation\", x = \"Spearman ρ\", y = \"\") +   theme_minimal() print(p_top_genes)"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"heatmap-of-top-10-genes","dir":"Articles","previous_headings":"","what":"Heatmap of Top 10 Genes","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Heatmap top 10 genes pseudotime correlation.","code":"top10 <- gc_df %>% slice_max(Cor, n = 10) %>% pull(Gene) %>% unique() valid_cells <- colnames(seurat_obj)[seurat_obj@meta.data$RNA_snn_res.0.1 == \"1\" & !is.na(seurat_obj@meta.data$pseudotime)] cells <- valid_cells[order(seurat_obj@meta.data[valid_cells, \"pseudotime\"])] expr <- GetAssayData(seurat_obj, assay = \"RNA\", slot = \"data\") present <- intersect(top10, rownames(expr)) missing <- setdiff(top10, rownames(expr)) mat <- expr[present, cells, drop = FALSE] if (length(missing)) {   mat2 <- matrix(NA, nrow = length(missing), ncol = length(cells), dimnames = list(missing, cells))   mat <- rbind(mat, mat2) } mat <- mat[top10, , drop = FALSE] pheatmap(mat, cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE,          main = \"Top 10 Genes by Pseudotime Correlation\")"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"module-score-trajectories","dir":"Articles","previous_headings":"","what":"Module-Score Trajectories","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Compute plot module scores PT2 communities along pseudotime.","code":"# Define custom modules to plot custom_mods <- list(   M1 = c('S100A8', 'UBB', 'SSR4'),   M2 = c('LGALS9', 'HLA-DPA1') )  # Plot trajectories for custom modules in PT2 p_modtraj <- plot_module_trajectories(   comm_results, seurat_obj, bin_index = 2,    custom_modules = custom_mods,   cluster_field = \"RNA_snn_res.0.1\", cluster_id = \"1\", assay = \"RNA\" ) print(p_modtraj)"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"edge-pseudotime-correlation-density","dir":"Articles","previous_headings":"","what":"Edge-Pseudotime Correlation Density","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Compute plot density edge-pseudotime correlations specified pseudotime bin. evaluated gene-gene interactions change pseudotime computing Spearman correlations edge expression pseudotime PT2. Using plot_edge_correlations(), observed edge correlations centered around zero across groups. Community 1 Community 2 show similar distributions, subtle differences suggest distinct temporal dynamics within across gene modules.","code":"p_ec <- plot_edge_correlations(   comm_results, pt_results, seurat_obj, bin_name = \"PT2\",   cluster_field = \"RNA_snn_res.0.1\", cluster_id = \"1\", assay = \"RNA\",   layer = \"data\", pseudotime_col = \"pseudotime\", method = \"spearman\",   edge_threshold = 0.95, n_cores = 36 ) print(p_ec)"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"combined-summary-plots","dir":"Articles","previous_headings":"","what":"Combined Summary Plots","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Arrange key plots composite figure quick overview.","code":"(p_pt | p_gc) / (p_ec | p_gl) / p_modtraj"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"save-results","dir":"Articles","previous_headings":"","what":"Save Results","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"","code":"# saveRDS(pt_results, \"pseudotime_results.rds\") # saveRDS(comm_results, \"pseudotime_communities.rds\") # saveRDS(enrich_results, \"enrich_results.rds\") sessionInfo() ## R version 4.2.1 (2022-06-23) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Red Hat Enterprise Linux 9.4 (Plow) ##  ## Matrix products: default ## BLAS/LAPACK: /app1/ebapps/arches/flat-avx2/software/FlexiBLAS/3.2.0-GCC-11.3.0/lib64/libflexiblas.so.3.2 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] DOSE_3.22.1           flextable_0.9.2       ggraph_2.0.5          ##  [4] miEdgeR_0.1.0         pheatmap_1.0.12       ggVennDiagram_1.2.3   ##  [7] ggpubr_0.4.0          org.Hs.eg.db_3.15.0   AnnotationDbi_1.58.0  ## [10] IRanges_2.32.0        S4Vectors_0.36.1      Biobase_2.56.0        ## [13] BiocGenerics_0.44.0   clusterProfiler_4.4.4 ggplot2_3.3.6         ## [16] dplyr_1.1.4           igraph_1.3.2          SeuratObject_4.1.3    ## [19] Seurat_4.3.0          ##  ## loaded via a namespace (and not attached): ##   [1] rappdirs_0.3.3          scattermore_1.2         ragg_1.2.5              ##   [4] tidyr_1.2.0             bit64_4.0.5             knitr_1.50              ##   [7] irlba_2.3.5             data.table_1.14.2       KEGGREST_1.36.2         ##  [10] RCurl_1.98-1.7          generics_0.1.3          cowplot_1.1.1           ##  [13] RSQLite_2.2.14          shadowtext_0.1.2        RANN_2.6.1              ##  [16] future_1.26.1           bit_4.0.4               enrichplot_1.16.2       ##  [19] spatstat.data_3.0-0     xml2_1.3.3              httpuv_1.6.5            ##  [22] viridis_0.6.2           xfun_0.52               jquerylib_0.1.4         ##  [25] evaluate_0.15           promises_1.2.0.1        DBI_1.1.3               ##  [28] htmlwidgets_1.5.4       spatstat.geom_3.0-3     purrr_1.0.4             ##  [31] ellipsis_0.3.2          backports_1.4.1         fontLiberation_0.1.0    ##  [34] fontBitstreamVera_0.1.1 deldir_1.0-6            vctrs_0.6.5             ##  [37] ROCR_1.0-11             abind_1.4-5             cachem_1.0.6            ##  [40] withr_2.5.0             ggforce_0.3.3           RVenn_1.1.0             ##  [43] progressr_0.10.1        sctransform_0.4.1       treeio_1.20.2           ##  [46] goftest_1.2-3           cluster_2.1.3           ape_5.6-2               ##  [49] lazyeval_0.2.2          crayon_1.5.1            crul_1.2.0              ##  [52] spatstat.explore_3.0-5  labeling_0.4.2          pkgconfig_2.0.3         ##  [55] tweenr_1.0.2            GenomeInfoDb_1.32.2     nlme_3.1-158            ##  [58] rlang_1.1.5             globals_0.15.0          lifecycle_1.0.4         ##  [61] miniUI_0.1.1.1          downloader_0.4          fontquiver_0.2.1        ##  [64] httpcode_0.3.0          rprojroot_2.0.3         polyclip_1.10-0         ##  [67] matrixStats_0.62.0      lmtest_0.9-40           graph_1.74.0            ##  [70] Matrix_1.5-3            aplot_0.1.9             carData_3.0-5           ##  [73] zoo_1.8-10              ggridges_0.5.3          png_0.1-7               ##  [76] viridisLite_0.4.0       bitops_1.0-7            KernSmooth_2.23-20      ##  [79] Biostrings_2.64.0       blob_1.2.3              stringr_1.4.0           ##  [82] qvalue_2.28.0           parallelly_1.32.0       spatstat.random_3.0-1   ##  [85] rstatix_0.7.0           gridGraphics_0.5-1      ggsignif_0.6.3          ##  [88] reactome.db_1.81.0      scales_1.2.0            memoise_2.0.1           ##  [91] graphite_1.42.0         magrittr_2.0.3          plyr_1.8.7              ##  [94] ica_1.0-2               zlibbioc_1.42.0         compiler_4.2.1          ##  [97] scatterpie_0.1.8        RColorBrewer_1.1-3      fitdistrplus_1.1-8      ## [100] cli_3.6.4               XVector_0.36.0          listenv_0.8.0           ## [103] patchwork_1.1.1         pbapply_1.5-0           mgcv_1.8-40             ## [106] MASS_7.3-57             tidyselect_1.2.1        stringi_1.7.6           ## [109] textshaping_0.3.6       yaml_2.3.10             GOSemSim_2.22.0         ## [112] askpass_1.1             ggrepel_0.9.1           grid_4.2.1              ## [115] sass_0.4.10             fastmatch_1.1-3         tools_4.2.1             ## [118] future.apply_1.9.0      parallel_4.2.1          rstudioapi_0.13         ## [121] uuid_1.1-0              gridExtra_2.3           farver_2.1.0            ## [124] Rtsne_0.16              digest_0.6.29           shiny_1.7.1             ## [127] gfonts_0.2.0            Rcpp_1.0.8.3            car_3.1-0               ## [130] broom_0.8.0             infotheo_1.2.0.1        later_1.3.0             ## [133] RcppAnnoy_0.0.20        httr_1.4.3              gdtools_0.3.3           ## [136] colorspace_2.0-3        fs_1.5.2                tensor_1.5              ## [139] reticulate_1.25         splines_4.2.1           uwot_0.1.14             ## [142] yulab.utils_0.2.0       tidytree_0.4.1          spatstat.utils_3.1-3    ## [145] pkgdown_2.1.1           graphlayouts_0.8.0      sp_1.5-1                ## [148] ggplotify_0.1.0         plotly_4.10.0           systemfonts_1.0.4       ## [151] xtable_1.8-4            jsonlite_1.8.0          ggtree_3.4.4            ## [154] tidygraph_1.2.1         ggfun_0.1.8             R6_2.5.1                ## [157] pillar_1.10.1           htmltools_0.5.8.1       mime_0.12               ## [160] glue_1.6.2              fastmap_1.2.0           BiocParallel_1.32.5     ## [163] codetools_0.2-18        fgsea_1.22.0            lattice_0.20-45         ## [166] bslib_0.9.0             spatstat.sparse_3.0-0   tibble_3.2.1            ## [169] curl_6.2.2              leiden_0.4.2            ReactomePA_1.40.0       ## [172] officer_0.6.2           zip_2.2.0               GO.db_3.15.0            ## [175] openssl_2.0.2           survival_3.3-1          rmarkdown_2.29          ## [178] desc_1.4.1              munsell_0.5.0           DO.db_2.9               ## [181] GenomeInfoDbData_1.2.8  reshape2_1.4.4          gtable_0.3.0"},{"path":"https://iichelhadi.github.io/miEdgeR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Elhadi Iich. Maintainer.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Iich E (2025). miEdgeR: Mutual Information Network Hypergraph Analysis Seurat Data. R package version 0.1.0, https://iichelhadi.github.io/miEdgeR/.","code":"@Manual{,   title = {miEdgeR: Mutual Information Network and Hypergraph Analysis for Seurat Data},   author = {Elhadi Iich},   year = {2025},   note = {R package version 0.1.0},   url = {https://iichelhadi.github.io/miEdgeR/}, }"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/build_mi_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Build MI Graph — build_mi_graph","title":"Build MI Graph — build_mi_graph","text":"Build MI Graph","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/build_mi_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build MI Graph — build_mi_graph","text":"","code":"build_mi_graph(   mi_matrix,   threshold_method = \"percentile\",   percentile = 0.95,   fixed_threshold = NULL )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/build_mi_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build MI Graph — build_mi_graph","text":"mi_matrix Mutual information matrix threshold_method Threshold method, either \"percentile\" \"fixed\" percentile Percentile thresholding (used threshold_method = \"percentile\") fixed_threshold Fixed MI value thresholding (used threshold_method = \"fixed\")","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/build_mi_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build MI Graph — build_mi_graph","text":"igraph object","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/choose_adaptive_nbins.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose Adaptive Number of Bins — choose_adaptive_nbins","title":"Choose Adaptive Number of Bins — choose_adaptive_nbins","text":"Choose Adaptive Number Bins","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/choose_adaptive_nbins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose Adaptive Number of Bins — choose_adaptive_nbins","text":"","code":"choose_adaptive_nbins(   expr_data,   min_bins = 5,   max_bins = 30,   min_cells_per_bin = 75 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/choose_adaptive_nbins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose Adaptive Number of Bins — choose_adaptive_nbins","text":"expr_data Expression data min_bins Minimum number bins max_bins Maximum number bins min_cells_per_bin Minimum cells per bin","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/choose_adaptive_nbins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose Adaptive Number of Bins — choose_adaptive_nbins","text":"Number bins","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_cmi_matrix_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Conditional MI Matrix in Parallel — compute_cmi_matrix_parallel","title":"Compute Conditional MI Matrix in Parallel — compute_cmi_matrix_parallel","text":"Compute Conditional MI Matrix Parallel","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_cmi_matrix_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Conditional MI Matrix in Parallel — compute_cmi_matrix_parallel","text":"","code":"compute_cmi_matrix_parallel(   expr_subset,   pt_vec,   n_cores = parallel::detectCores() - 10,   nbins = 10 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_cmi_matrix_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Conditional MI Matrix in Parallel — compute_cmi_matrix_parallel","text":"expr_subset Expression data subset pt_vec Pseudotime vector n_cores Number cores nbins Number bins","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_cmi_matrix_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Conditional MI Matrix in Parallel — compute_cmi_matrix_parallel","text":"Conditional MI matrix","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_mi_matrix_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Mutual Information Matrix in Parallel — compute_mi_matrix_parallel","title":"Compute Mutual Information Matrix in Parallel — compute_mi_matrix_parallel","text":"Compute Mutual Information Matrix Parallel","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_mi_matrix_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Mutual Information Matrix in Parallel — compute_mi_matrix_parallel","text":"","code":"compute_mi_matrix_parallel(expr_subset, n_cores = parallel::detectCores() - 10)"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_mi_matrix_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Mutual Information Matrix in Parallel — compute_mi_matrix_parallel","text":"expr_subset Expression data subset n_cores Number cores","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_mi_matrix_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Mutual Information Matrix in Parallel — compute_mi_matrix_parallel","text":"MI matrix","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_mi_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute MI Network for a Cluster — compute_mi_network","title":"Compute MI Network for a Cluster — compute_mi_network","text":"Compute MI Network Cluster","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_mi_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute MI Network for a Cluster — compute_mi_network","text":"","code":"compute_mi_network(   seurat_obj,   cluster_id,   cluster_field,   assay_name = \"RNA\",   counts_layer = \"counts\",   data_layer = \"data\",   top_n_genes = 5000,   max_cells = 1500,   min_expr_pct = 0.05,   n_cores = parallel::detectCores() - 1 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_mi_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute MI Network for a Cluster — compute_mi_network","text":"seurat_obj Seurat object cluster_id Cluster ID cluster_field Metadata column name clusters assay_name Assay name (default: \"RNA\") counts_layer Layer counts data (default: \"counts\") data_layer Layer normalized data (default: \"data\") top_n_genes Number top variable genes max_cells Maximum number cells min_expr_pct Minimum expression percentage n_cores Number cores","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_mi_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute MI Network for a Cluster — compute_mi_network","text":"List containing graph, MI matrix, genes","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_pseudotime_mi_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Pseudotime-Aware MI Networks — compute_pseudotime_mi_network","title":"Compute Pseudotime-Aware MI Networks — compute_pseudotime_mi_network","text":"Compute Pseudotime-Aware MI Networks","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_pseudotime_mi_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Pseudotime-Aware MI Networks — compute_pseudotime_mi_network","text":"","code":"compute_pseudotime_mi_network(   seurat_obj,   cluster_id,   cluster_field,   pseudotime_col,   assay_name = \"RNA\",   counts_layer = \"counts\",   data_layer = \"data\",   n_bins = 5,   min_cells_bin = 75,   top_n_genes = 5000,   max_cells = 1500,   min_expr_pct = 0.05,   n_cores = parallel::detectCores() - 1,   bin_method = \"quantile\" )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_pseudotime_mi_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Pseudotime-Aware MI Networks — compute_pseudotime_mi_network","text":"seurat_obj Seurat object cluster_id Cluster ID cluster_field Metadata column name clusters pseudotime_col Metadata column name pseudotime assay_name Assay name (default: \"RNA\") counts_layer Layer counts data (default: \"counts\") data_layer Layer normalized data (default: \"data\") n_bins Number pseudotime bins min_cells_bin Minimum cells per bin top_n_genes Number top variable genes max_cells Maximum number cells min_expr_pct Minimum expression percentage n_cores Number cores bin_method Binning method (\"quantile\" \"equal_width\")","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_pseudotime_mi_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Pseudotime-Aware MI Networks — compute_pseudotime_mi_network","text":"List MI networks per pseudotime bin","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/detect_communities.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Communities Detects communities using label propagation and neighborhood overlap. — detect_communities","title":"Detect Communities Detects communities using label propagation and neighborhood overlap. — detect_communities","text":"Detect Communities Detects communities using label propagation neighborhood overlap.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/detect_communities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Communities Detects communities using label propagation and neighborhood overlap. — detect_communities","text":"","code":"detect_communities(graph, min_size = 10, overlap_threshold = 0.1)"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/detect_communities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Communities Detects communities using label propagation and neighborhood overlap. — detect_communities","text":"graph Input igraph object. min_size Minimum community size. overlap_threshold Overlap threshold adding genes (default: 0.1).","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/detect_communities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect Communities Detects communities using label propagation and neighborhood overlap. — detect_communities","text":"List communities sizes.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/detect_communities_across_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Communities Across Pseudotime Bins — detect_communities_across_bins","title":"Detect Communities Across Pseudotime Bins — detect_communities_across_bins","text":"Detects communities pseudotime bin using percolation, Leiden clustering, neighborhood overlap.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/detect_communities_across_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Communities Across Pseudotime Bins — detect_communities_across_bins","text":"","code":"detect_communities_across_bins(   pt_results,   min_size = 10,   n_iterations = 100,   edge_fraction = 0.6,   freq_threshold = 0.5,   percentile = 0.95,   resolution_parameter = 0.6,   overlap_threshold = 0.05 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/detect_communities_across_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Communities Across Pseudotime Bins — detect_communities_across_bins","text":"pt_results list pseudotime bin results compute_pseudotime_mi_network. min_size Integer, minimum size communities retain (default: 10). n_iterations Integer, number percolation iterations (default: 100). edge_fraction Numeric, fraction edges keep percolation (default: 0.6). freq_threshold Numeric, frequency threshold consensus edges (default: 0.5). percentile Numeric, percentile edge thresholding (default: 0.95). resolution_parameter Numeric, resolution parameter Leiden clustering (default: 0.6). overlap_threshold Numeric, threshold neighborhood overlap expansion (default: 0.05).","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/detect_communities_across_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect Communities Across Pseudotime Bins — detect_communities_across_bins","text":"list community detection results bin.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/edge_gain_loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Edge Gain/Loss Analysis — edge_gain_loss","title":"Edge Gain/Loss Analysis — edge_gain_loss","text":"Edge Gain/Loss Analysis","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/edge_gain_loss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edge Gain/Loss Analysis — edge_gain_loss","text":"","code":"edge_gain_loss(bin_graphs)"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/edge_gain_loss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edge Gain/Loss Analysis — edge_gain_loss","text":"bin_graphs List graphs per bin","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/edge_gain_loss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edge Gain/Loss Analysis — edge_gain_loss","text":"List stable, gained, lost edges","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/edge_pt_correlation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Edge-Pseudotime Correlations — edge_pt_correlation","title":"Compute Edge-Pseudotime Correlations — edge_pt_correlation","text":"Computes correlations edge weights pseudotime given graph.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/edge_pt_correlation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Edge-Pseudotime Correlations — edge_pt_correlation","text":"","code":"edge_pt_correlation(   graph,   seurat_obj,   pseudotime_col = \"pseudotime\",   assay = \"RNA\",   layer = \"data\",   method = \"spearman\",   edge_threshold = 0.95,   n_cores = 1 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/edge_pt_correlation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Edge-Pseudotime Correlations — edge_pt_correlation","text":"graph igraph object. seurat_obj Seurat object. pseudotime_col Character, metadata column pseudotime. assay Character, assay use. layer Character, data layer use. method Character, correlation method. edge_threshold Numeric, edge weight threshold. n_cores Integer, number cores parallel computation.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/edge_pt_correlation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Edge-Pseudotime Correlations — edge_pt_correlation","text":"data frame edge correlations.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/enrich_go.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Enrichment Analysis for Communities — enrich_go","title":"Perform Enrichment Analysis for Communities — enrich_go","text":"Performs enrichment analysis community using specified semantic space.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/enrich_go.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Enrichment Analysis for Communities — enrich_go","text":"","code":"enrich_go(   large_communities,   semantic_space = \"GO\",   ontology = \"BP\",   pvalueCutoff = 0.05,   qvalueCutoff = 0.2 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/enrich_go.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Enrichment Analysis for Communities — enrich_go","text":"large_communities list communities list community detection results (detect_communities_across_bins). semantic_space Character, semantic space use (\"GO\", \"KEGG\", \"\", \"Reactome\") (default: \"GO\"). ontology Character, GO ontology use (\"BP\", \"CC\", \"MF\", \"\") (default: \"BP\"). pvalueCutoff Numeric, p-value cutoff enrichment (default: 0.05). qvalueCutoff Numeric, q-value cutoff enrichment (default: 0.2).","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/enrich_go.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Enrichment Analysis for Communities — enrich_go","text":"named list enrichment results.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/filter_housekeeping.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Housekeeping Genes — filter_housekeeping","title":"Filter Housekeeping Genes — filter_housekeeping","text":"Filter Housekeeping Genes","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/filter_housekeeping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Housekeeping Genes — filter_housekeeping","text":"","code":"filter_housekeeping(gene_list)"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/filter_housekeeping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Housekeeping Genes — filter_housekeeping","text":"gene_list Vector gene names","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/filter_housekeeping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Housekeeping Genes — filter_housekeeping","text":"Filtered gene list excluding housekeeping genes","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/gene_pt_correlation.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene-Pseudotime Correlation — gene_pt_correlation","title":"Gene-Pseudotime Correlation — gene_pt_correlation","text":"Gene-Pseudotime Correlation","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/gene_pt_correlation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene-Pseudotime Correlation — gene_pt_correlation","text":"","code":"gene_pt_correlation(   seurat_obj,   pseudotime_col,   assay = \"RNA\",   layer = \"data\",   method = \"spearman\" )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/gene_pt_correlation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene-Pseudotime Correlation — gene_pt_correlation","text":"seurat_obj Seurat object pseudotime_col Metadata column name pseudotime assay Assay name layer Layer name method Correlation method","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/gene_pt_correlation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene-Pseudotime Correlation — gene_pt_correlation","text":"Data frame gene correlations","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/get_expr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Expression Data for a Cluster — get_expr_data","title":"Get Expression Data for a Cluster — get_expr_data","text":"Get Expression Data Cluster","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/get_expr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Expression Data for a Cluster — get_expr_data","text":"","code":"get_expr_data(   seurat_obj,   cluster_id,   cluster_field,   assay_name = \"RNA\",   counts_layer = \"counts\",   data_layer = \"data\",   top_n_genes = 5000,   max_cells = 1500,   min_expr_pct = 0.05 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/get_expr_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Expression Data for a Cluster — get_expr_data","text":"seurat_obj Seurat object cluster_id Cluster ID cluster_field Metadata column name clusters assay_name Assay name (default: \"RNA\") counts_layer Layer counts data (default: \"counts\") data_layer Layer normalized data (default: \"data\") top_n_genes Number top variable genes max_cells Maximum number cells min_expr_pct Minimum expression percentage","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/get_expr_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Expression Data for a Cluster — get_expr_data","text":"Expression matrix","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/make_hypergraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Hypergraph from Gene Groups — make_hypergraph","title":"Create Hypergraph from Gene Groups — make_hypergraph","text":"Create Hypergraph Gene Groups","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/make_hypergraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Hypergraph from Gene Groups — make_hypergraph","text":"","code":"make_hypergraph(group_list, all_genes)"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/make_hypergraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Hypergraph from Gene Groups — make_hypergraph","text":"group_list List gene groups all_genes genes","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/make_hypergraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Hypergraph from Gene Groups — make_hypergraph","text":"List containing hypergraph, incidence matrix, genes, groups","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/make_pt_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin Cells Along Pseudotime — make_pt_bins","title":"Bin Cells Along Pseudotime — make_pt_bins","text":"Bin Cells Along Pseudotime","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/make_pt_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin Cells Along Pseudotime — make_pt_bins","text":"","code":"make_pt_bins(seurat_obj, pseudotime_col, n_bins = 5, bin_method = \"quantile\")"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/make_pt_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin Cells Along Pseudotime — make_pt_bins","text":"seurat_obj Seurat object pseudotime_col Metadata column name pseudotime n_bins Number bins bin_method Binning method (\"quantile\" \"equal_width\")","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/make_pt_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bin Cells Along Pseudotime — make_pt_bins","text":"Vector bin assignments","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/percolate_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Percolate Graph — percolate_graph","title":"Percolate Graph — percolate_graph","text":"Creates consensus graph filtering edges 95th percentile retaining >=50","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/percolate_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percolate Graph — percolate_graph","text":"","code":"percolate_graph(   graph,   n_iterations = 50,   edge_fraction = 0.6,   freq_threshold = 0.5,   percentile = 0.95 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/percolate_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percolate Graph — percolate_graph","text":"graph Input igraph object. n_iterations Number percolation iterations. edge_fraction Fraction edges retain per iteration. freq_threshold Frequency threshold edge retention. percentile Percentile initial edge filtering (default: 0.95).","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/percolate_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Percolate Graph — percolate_graph","text":"Consensus igraph object.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_edge_correlations.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Edge-Pseudotime Correlation Density — plot_edge_correlations","title":"Plot Edge-Pseudotime Correlation Density — plot_edge_correlations","text":"Computes plots density edge-pseudotime correlations specified pseudotime bin cluster.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_edge_correlations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Edge-Pseudotime Correlation Density — plot_edge_correlations","text":"","code":"plot_edge_correlations(   comm_results,   pt_results,   seurat_obj,   bin_name,   cluster_field = \"RNA_snn_res.0.1\",   cluster_id = \"1\",   assay = \"RNA\",   layer = \"data\",   pseudotime_col = \"pseudotime\",   method = \"spearman\",   edge_threshold = 0.95,   n_cores = 5,   title = NULL )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_edge_correlations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Edge-Pseudotime Correlation Density — plot_edge_correlations","text":"comm_results list community detection results detect_communities_across_bins. pt_results list pseudotime bin results compute_pseudotime_mi_network. seurat_obj Seurat object containing pseudotime cluster metadata. bin_name Character, name pseudotime bin use (e.g., \"PT2\"). cluster_field Character, metadata field cluster IDs (default: \"RNA_snn_res.0.1\"). cluster_id Character, cluster ID filter cells (default: \"1\"). assay Character, assay use (default: \"RNA\"). layer Character, data layer use (default: \"data\"). pseudotime_col Character, metadata column pseudotime (default: \"pseudotime\"). method Character, correlation method (default: \"spearman\"). edge_threshold Numeric, edge weight threshold (default: 0.95). n_cores Integer, number cores parallel computation (default: 5). title Character, title plot (default: dynamically generated).","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_edge_correlations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Edge-Pseudotime Correlation Density — plot_edge_correlations","text":"ggplot object.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_edge_gain_loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Edge Gain/Loss Across Consecutive Pseudotime Bins — plot_edge_gain_loss","title":"Plot Edge Gain/Loss Across Consecutive Pseudotime Bins — plot_edge_gain_loss","text":"Plots count stable, gained, lost edges consecutive pseudotime bins returns edge details.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_edge_gain_loss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Edge Gain/Loss Across Consecutive Pseudotime Bins — plot_edge_gain_loss","text":"","code":"plot_edge_gain_loss(   pt_results,   cluster_id = \"C1\",   title = \"Edge Gain/Loss/Stable Counts Per Bin\" )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_edge_gain_loss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Edge Gain/Loss Across Consecutive Pseudotime Bins — plot_edge_gain_loss","text":"pt_results list pseudotime bin results compute_pseudotime_mi_network. cluster_id Character, cluster ID display (default: \"C1\"). title Character, title plot (default: \"Edge Gain/Loss/Stable Counts Per Bin\").","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_edge_gain_loss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Edge Gain/Loss Across Consecutive Pseudotime Bins — plot_edge_gain_loss","text":"list containing ggplot object list edge changes (stable, gained, lost) per bin pair.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_go_terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Enrichment Terms — plot_go_terms","title":"Plot Enrichment Terms — plot_go_terms","text":"Visualizes top enrichment terms enrichment results dot plot.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_go_terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Enrichment Terms — plot_go_terms","text":"","code":"plot_go_terms(   enrich_results,   top_n_terms = 4,   title = \"GO Terms for Communities\",   ontology = \"BP\" )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_go_terms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Enrichment Terms — plot_go_terms","text":"enrich_results named list enrichment results enrich_go. top_n_terms Integer, number top terms plot per community (default: 4). title Character, title plot (default: \"GO Terms Communities\"). ontology Character, ontology used (\"BP\", \"CC\", \"MF\", \"\", \"KEGG\", \"\", \"Reactome\") (default: \"BP\").","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_go_terms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Enrichment Terms — plot_go_terms","text":"ggplot object.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_hypergraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Hypergraph with Overlapping Genes Highlighted — plot_hypergraph","title":"Plot Hypergraph with Overlapping Genes Highlighted — plot_hypergraph","text":"Visualizes hypergraph communities hyperedges, highlighting overlapping genes specified communities.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_hypergraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Hypergraph with Overlapping Genes Highlighted — plot_hypergraph","text":"","code":"plot_hypergraph(   large_communities,   comm_indices = NULL,   title = \"Hypergraph with Overlapping Communities\",   key_genes = c(\"PRSS1\", \"PRSS2\") )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_hypergraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Hypergraph with Overlapping Genes Highlighted — plot_hypergraph","text":"large_communities list communities, element contains nodes community. comm_indices Integer vector, indices communities plot (default: communities). title Character, title plot (default: \"Hypergraph Overlapping Communities\"). key_genes Character vector, additional genes label (default: c(\"PRSS1\", \"PRSS2\")).","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_hypergraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Hypergraph with Overlapping Genes Highlighted — plot_hypergraph","text":"ggraph plot object.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_mi_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot MI Network with Community Coloring — plot_mi_network","title":"Plot MI Network with Community Coloring — plot_mi_network","text":"Visualizes subset MI network community coloring, labeling top nodes community.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_mi_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot MI Network with Community Coloring — plot_mi_network","text":"","code":"plot_mi_network(   g_consensus,   large_communities,   sample_size = 100,   top_n_per_comm = 5,   title = \"Network Communities\" )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_mi_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot MI Network with Community Coloring — plot_mi_network","text":"g_consensus igraph object representing consensus graph. large_communities list communities, element contains nodes community. sample_size Integer, number nodes sample graph (default: 100). top_n_per_comm Integer, number top nodes per community label (default: 5). title Character, title plot (default: \"Network Communities\").","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_mi_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot MI Network with Community Coloring — plot_mi_network","text":"ggraph plot object.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_module_trajectories.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Module-Score Trajectories Across Pseudotime — plot_module_trajectories","title":"Plot Module-Score Trajectories Across Pseudotime — plot_module_trajectories","text":"Computes plots module scores specified communities genes along pseudotime.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_module_trajectories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Module-Score Trajectories Across Pseudotime — plot_module_trajectories","text":"","code":"plot_module_trajectories(   comm_results,   seurat_obj,   bin_index,   comm_indices = NULL,   custom_modules = NULL,   cluster_field = \"RNA_snn_res.0.1\",   cluster_id = \"1\",   assay = \"RNA\",   title = \"Module-Score Trajectories\" )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_module_trajectories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Module-Score Trajectories Across Pseudotime — plot_module_trajectories","text":"comm_results list community detection results detect_communities_across_bins. seurat_obj Seurat object containing pseudotime cluster metadata. bin_index Integer, index pseudotime bin use (e.g., 2 PT2). comm_indices Integer vector, indices communities plot (default: NULL, uses communities). custom_modules named list custom gene sets plot (default: NULL; provided, overrides comm_indices). cluster_field Character, metadata field cluster IDs (default: \"RNA_snn_res.0.1\"). cluster_id Character, cluster ID filter cells (default: \"1\"). assay Character, assay use module scoring (default: \"RNA\"). title Character, title plot (default: \"Module-Score Trajectories\").","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_module_trajectories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Module-Score Trajectories Across Pseudotime — plot_module_trajectories","text":"ggplot object.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/summarize_hub_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Hub Genes in Communities — summarize_hub_genes","title":"Summarize Hub Genes in Communities — summarize_hub_genes","text":"Generates flextable summarizing top hub genes (degree) community consensus graph.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/summarize_hub_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Hub Genes in Communities — summarize_hub_genes","text":"","code":"summarize_hub_genes(   g_consensus,   large_communities,   cluster_name = \"Cluster\",   top_n = 10 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/summarize_hub_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Hub Genes in Communities — summarize_hub_genes","text":"g_consensus igraph object representing consensus graph. large_communities list communities, element contains nodes community. cluster_name Character, name cluster (default: \"Cluster\"). top_n Integer, number top hub genes include per community (default: 10).","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/summarize_hub_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Hub Genes in Communities — summarize_hub_genes","text":"flextable object.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/summarize_hub_genes_across_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Hub Genes Across Pseudotime Bins — summarize_hub_genes_across_bins","title":"Summarize Hub Genes Across Pseudotime Bins — summarize_hub_genes_across_bins","text":"Generates flextable summarizing top hub genes (degree) community across pseudotime bins.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/summarize_hub_genes_across_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Hub Genes Across Pseudotime Bins — summarize_hub_genes_across_bins","text":"","code":"summarize_hub_genes_across_bins(comm_results, pt_results, top_n = 10)"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/summarize_hub_genes_across_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Hub Genes Across Pseudotime Bins — summarize_hub_genes_across_bins","text":"comm_results list community detection results detect_communities_across_bins. pt_results list pseudotime bin results compute_pseudotime_mi_network. top_n Integer, number top hub genes include per community (default: 10).","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/summarize_hub_genes_across_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Hub Genes Across Pseudotime Bins — summarize_hub_genes_across_bins","text":"flextable object.","code":""}]
