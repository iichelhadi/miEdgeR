[{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About this vignette","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"walkthrough demonstrates build mutual-information (MI) networks hypergraphs single-cell RNA-seq data using miEdgeR. extract cluster-specific gene expression, compute pairwise MI, refine networks percolation community detection, finally assemble visualize hypergraph gene modules. Prerequisites: R (≥ 4.2.0) Seurat object clustering metadata (eg. RNA_snn_res.0.1) optional pseudotime Packages: miEdgeR, Seurat, igraph, hypergraph, dplyr, ggplot2, ggraph, flextable","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"vignette walks key steps MI network construction higher-order hypergraph analysis. Starting Seurat object, show filter highly variable genes, compute threshold mutual information (MI), remove noise via percolation, detect communities, represent communities hyperedges.","code":"Note: This vignette requires the PBMC 3K dataset originally provided by the Seurat team. Please download the file pbmc3k.rds and place it in your working directory before running the code chunks."},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"load-libraries-and-data","dir":"Articles","previous_headings":"","what":"Load Libraries and Data","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"load necessary packages read preprocessed Seurat object. Ensure object contains clustering column (RNA_snn_res.0.1 seurat demo pbmc3K data) corresponding cluster IDs.","code":"library(Seurat) library(miEdgeR) library(igraph) library(dplyr) library(ggplot2) library(ggraph) library(flextable)  seurat_obj <- readRDS('pbmc3k.rds')"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"data-exploration","dir":"Articles","previous_headings":"","what":"Data exploration","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"Exploring preprocessed pbmc3k data. tutorial focus CD14+ Mono cluster “1”","code":"DimPlot(seurat_obj, reduction = 'umap') features = c(\"MS4A1\", \"GNLY\", \"CD3E\", \"CD14\",               \"FCER1A\", \"FCGR3A\", \"LYZ\", \"PPBP\", \"CD8A\") VlnPlot(seurat_obj, features = features)"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"building-a-mutual-information-network","dir":"Articles","previous_headings":"","what":"Building a Mutual-Information Network","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"call compute_mi_network(), hood: Extracts expression cluster “1” (1,500 cells; genes > 5% cells). Filters top 3,000 variable genes (removing housekeeping genes). Discretizes expression (adaptive binning) computes pairwise MI parallel. Constructs undirected igraph object thresholding 95th percentile MI values. can adjust percentile (e.g. 0.90 liberal edges) supply fixed_threshold absolute MI cutoffs. Note: computing mi-network can computationally demanding. strongly advice limit number cells genes variable ones resulting MI matrix filtered using 95th percentile threshold build_mi_graph(), producing graph 2911 genes (nodes), 211,804 edges, density ~0.05. indicates substantial gene-gene co-dependence within cluster.","code":"result <- compute_mi_network(   seurat_obj,   cluster_id = \"1\",   cluster_field = \"RNA_snn_res.0.1\",   assay_name = \"RNA\",   counts_layer = \"counts\",   data_layer = \"data\",   min_expr_pct = 0.05,   top_n_genes = 3000,   n_cores = parallel::detectCores() - 5 ) ## Using adaptive nbins = 9 mi_matrix <- result$mi_matrix graph_percentile <- build_mi_graph(mi_matrix,                                     threshold_method = \"percentile\",                                     percentile = 0.95) cat(\"Vertices:\", vcount(graph_percentile), \"\\n\") ## Vertices: 2911 cat(\"Edges:\", ecount(graph_percentile), \"\\n\") ## Edges: 211804 cat(\"Density:\", graph.density(graph_percentile), \"\\n\") ## Density: 0.05000679"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"consensus-edges-via-percolation","dir":"Articles","previous_headings":"","what":"Consensus Edges via Percolation","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"Real-world networks can noisy. apply simple “percolation” strategy: Pre-filter: Keep top 5% edges weight. Resample 100 times, time retaining 60% edges random. Consensus: Edges appearing ≥ 50% iterations considered stable. yields consensus graph filters spurious edges. Community detection performed label propagation (cluster_label_prop()), yielding two robust gene communities (sizes: 571 93). neighborhood overlap step enriched communities including strongly connected neighboring genes.","code":"g_consensus <- percolate_graph(graph_percentile, n_iterations = 100,                                 edge_fraction = 0.6, freq_threshold = 0.5,                                 percentile = 0.95) set.seed(123) lc_comm <- cluster_label_prop(g_consensus, weights = E(g_consensus)$weight) lc_groups <- split(V(g_consensus)$name, membership(lc_comm)) lc_groups <- Filter(function(x) length(x) >= 10, lc_groups)  # Neighborhood overlap adj_matrix <- as_adjacency_matrix(g_consensus, attr = \"weight\", sparse = FALSE) overlap_threshold <- 0.1 for (node in V(g_consensus)$name) {   idx <- which(V(g_consensus)$name == node)   neighbors <- V(g_consensus)$name[adj_matrix[idx, ] > 0]   if (length(neighbors) == 0) next   for (i in seq_along(lc_groups)) {     comm_genes <- lc_groups[[i]]     ov <- length(intersect(neighbors, comm_genes)) / length(neighbors)     if (ov >= overlap_threshold && !(node %in% comm_genes)) {       lc_groups[[i]] <- c(comm_genes, node)     }   } }  large_communities <- lc_groups cat(\"Communities (size >= 10):\", length(large_communities), \"\\n\") ## Communities (size >= 10): 2 cat(\"Sizes:\", sapply(large_communities, length), \"\\n\") ## Sizes: 570 114"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"clustering-coefficient","dir":"Articles","previous_headings":"","what":"Clustering coefficient","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"Compute additional network metrics consensus graph. Centrality Metric Top 5 Genes Degree ATP5D, PSMA7, NEDD8, COPE, C19orf43, C11orf31, LSP1, UQCR11.1, ATP6V1F, EIF3G Betweenness S100A8, NEDD8, ATP5D, LDHA, LYZ, BRK1, COPE, HIGD2A, LAMTOR1, BST2 Closeness ATP5D, NEDD8, PSMA7, C19orf43, LSP1, COPE, TALDO1, UQCR11.1, ITGB2, AP2S1 assessed topology consensus MI network using global clustering coefficient (transitivity()), moderately high, indicating local gene co-regulation. Centrality analysis identified key genes based degree, betweenness, closeness, highlighting potential regulatory hubs ATP5D, NEDD8, COPE. central genes may play critical roles cluster-specific transcriptional programs.","code":"clustering_coeff <- transitivity(g_consensus, type = \"global\") cat(\"Global clustering coefficient:\", clustering_coeff, \"\\n\") ## Global clustering coefficient: 0.3873887 # Centrality measures (degree, betweenness, closeness) degree_centrality <- degree(g_consensus) betweenness_centrality <- betweenness(g_consensus) closeness_centrality <- closeness(g_consensus)  # Top 5 genes by each centrality measure top_degree <- names(sort(degree_centrality, decreasing = TRUE))[1:10] top_betweenness <- names(sort(betweenness_centrality, decreasing = TRUE))[1:10] top_closeness <- names(sort(closeness_centrality, decreasing = TRUE))[1:10]  # Create a summary table centrality_table <- data.frame(   Metric = c(\"Degree\", \"Betweenness\", \"Closeness\"),   Top_Genes = c(     paste(top_degree, collapse = \", \"),     paste(top_betweenness, collapse = \", \"),     paste(top_closeness, collapse = \", \")   ),   stringsAsFactors = FALSE ) ft_centrality <- flextable::flextable(centrality_table) %>%   flextable::autofit() %>%   flextable::set_header_labels(Metric = \"Centrality Metric\", Top_Genes = \"Top 5 Genes\") %>%   flextable::bg(part = \"header\", bg = \"gray\") %>%   flextable::theme_vanilla() ft_centrality"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"network-visualization","dir":"Articles","previous_headings":"","what":"Network Visualization","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"Visualize subset MI network. Nodes colored community, top hub genes per community labeled. plot highlights distinct gene modules highly connected core genes ATP5D, PSMA7, LYZ.","code":"plot_mi_network(g_consensus, large_communities, title = \"C1 MI Network Communities\")"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"hypergraph-visualization","dir":"Articles","previous_headings":"","what":"Hypergraph Visualization","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"visualize overlapping gene communities, constructed hypergraph genes connected assigned communities. Overlapping genes (shared across communities) highlighted red, community nodes green, unique genes blue. representation captures complex gene sharing across modules, emphasizing central roles genes like LYZ, GSTP1, various MHC class genes.","code":"plot_hypergraph(large_communities, comm_indices = c(1, 2),                  title = \"C1 Hypergraph with Overlapping Communities\") ## Overlapping genes: 112  ## Shared genes: BLVRB, CD52, CD74, CD99, CEBPB, CEBPD, CFL1, CTSC, GRN, HLA-DMA, HLA-DPB1, HLA-DQA1, HLA-DRA, IFI6, IFITM3, LGALS3, LY6E, NAP1L1, NFKBIA, NPC2, PSME2, PTPN6, S100A8, SLC25A6, SOD1, STXBP2, TIMP1, TSPO, TUBA1B, TYMP, UBC, YBX1, ARPC1B, ISCU, VPS28, CST3, HLA-DMB, HLA-DQA2, HLA-DQB1, OAZ1, PSAP, ODF3B, ABI3, PSMB6, GNB2L1, NAAA, TPT1, NCF1, CYTIP, EEF1D, CAPZA2, CSF3R, EVL, MNDA, MPC1, RBP7, S100A12, SRA1, WSB1, H3F3B, AIF1, ATP5G2, CD14, CFD, COTL1, CTSS, FCER1G, FCGR3A, FCN1, FTL, GPX1, GSTP1, HLA-A, HLA-B, IFITM2, LGALS2, LST1, LYZ, MALAT1, MS4A6A, MS4A7, MT-ND2, NEAT1, RHOC, RP11-290F20.3, S100A10, S100A4, S100A6, S100A9, SAT1, TYROBP, VIM, B2M, FTH1, S100A11, ARPC2, PFN1, TMSB10, NACA, ADA, CD79B, CDKN1C, CKB, CTSL, HES4, IFITM1, SIGLEC10, ALDH2, HLA-C, FOLR3, VCAN, MT-ND4"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"community-sizes","dir":"Articles","previous_headings":"","what":"Community Sizes","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"Visualize community sizes.","code":"comm_sizes_df <- data.frame(   Community = paste(\"Community\", seq_along(sapply(large_communities, length))),   Size = sapply(large_communities, length) ) p_comm_sizes <- ggplot(comm_sizes_df, aes(x = Community, y = Size, fill = Community)) +   geom_bar(stat = \"identity\") +   labs(title = \"Community Sizes (C1)\", x = \"Community\", y = \"Size\") +   theme_minimal() +   theme(legend.position = \"none\") print(p_comm_sizes)"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"hub-genes-table-from-full-graph","dir":"Articles","previous_headings":"","what":"Hub Genes Table from Full Graph","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"Generate table top hub genes (degree) community using full graph. Cluster Community Top Hub Genes C1 Community 1 S100A8, HLA-DPA1, ATP5D, C19orf43, HNRNPA2B1, TALDO1, PSMA7, NPM1, EIF3K, NDUFA11 Community 2 S100A8, S100A9, IFITM2, LYZ, YBX1, HLA-DPB1, GPX1, CD74, LGALS2, IFITM3 identified top hub genes within community ranking nodes based degree centrality. Using summarize_hub_genes(), extracted key genes likely involved core regulatory processes. example, S100A8, ATP5D, HLA-DPA1 emerged central Community 1, S100A9, LYZ, IFITM2 prominent Community 2. hubs may serve key functional markers regulatory nodes cluster.","code":"summarize_hub_genes(graph_percentile, large_communities, cluster_name = \"C1\")"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"hub-genes","dir":"Articles","previous_headings":"","what":"Hub Genes","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"Identify top hub genes communities percolated graph. Cluster Community Top Hub Genes C1 Community 1 ATP5D, PSMA7, NEDD8, COPE, C19orf43, C11orf31, LSP1, UQCR11.1, ATP6V1F, EIF3G Community 2 S100A8, LYZ, S100A9, IFITM2, FCGR3A, LST1, FCER1G, GPX1, AIF1, LGALS2","code":"summarize_hub_genes(g_consensus, large_communities, cluster_name = \"C1\")"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/mi_network_hypergraph.html","id":"go-enrichment-analysis","dir":"Articles","previous_headings":"","what":"GO Enrichment Analysis","title":"MI Network and Hypergraph Analysis with miEdgeR","text":"Perform enrichment communities filtering housekeeping genes tend -represented due high mi-scores","code":"# Perform enrichment enrich_results <- enrich_go(large_communities, ontology = \"BP\") ## Community 1 - Genes after filtering: 570  ## Community 2 - Genes after filtering: 114  ## Enrichment for Community 1 : ##                    ID                                            Description ## GO:0042773 GO:0042773               ATP synthesis coupled electron transport ## GO:0042775 GO:0042775 mitochondrial ATP synthesis coupled electron transport ## GO:0019882 GO:0019882                    antigen processing and presentation ## GO:0052547 GO:0052547                       regulation of peptidase activity ##            GeneRatio   BgRatio       pvalue     p.adjust       qvalue ## GO:0042773    33/501 102/18870 4.141226e-27 8.535067e-24 6.190043e-24 ## GO:0042775    33/501 102/18870 4.141226e-27 8.535067e-24 6.190043e-24 ## GO:0019882    29/501 116/18870 1.912162e-20 8.757701e-18 6.351508e-18 ## GO:0052547    41/501 312/18870 2.298203e-17 5.572465e-15 4.041421e-15 ##                                                                                                                                                                                                                                                                geneID ## GO:0042773                                    BID/CHCHD2/COX5A/COX5B/COX6A1/COX6B1/COX7A2L/COX7C/COX8A/GHITM/NDUFA4/NDUFB10/NDUFB7/NDUFB9/NDUFS5/NDUFS7/PARK7/UQCR10/UQCRH/UQCRQ/COX6C/UQCRFS1/NDUFS6/UQCRC1/NDUFA1/NDUFB2/ISCU/COX7A2/NDUFB1/CYCS/SDHB/NDUFA2/NDUFB4 ## GO:0042775                                    BID/CHCHD2/COX5A/COX5B/COX6A1/COX6B1/COX7A2L/COX7C/COX8A/GHITM/NDUFA4/NDUFB10/NDUFB7/NDUFB9/NDUFS5/NDUFS7/PARK7/UQCR10/UQCRH/UQCRQ/COX6C/UQCRFS1/NDUFS6/UQCRC1/NDUFA1/NDUFB2/ISCU/COX7A2/NDUFB1/CYCS/SDHB/NDUFA2/NDUFB4 ## GO:0019882                                                          CD68/CD74/CTSD/CTSH/FGL2/HLA-DMA/HLA-DPA1/HLA-DPB1/HLA-DQA1/HLA-DRA/HLA-DRB1/HLA-DRB5/HLA-E/IFI30/PSMB8/PSME1/PYCARD/HLA-DMB/HLA-DQA2/HLA-DQB1/LILRB2/CALR/CTSS/FCER1G/HLA-A/HLA-B/B2M/CTSL/HLA-C ## GO:0052547 ANP32B/BAX/BID/CARD16/CASP1/CD44/CSTB/CTSD/CTSH/FIS1/GRN/HMGB1/IFI6/LAMTOR5/LAPTM5/LGALS9/NDUFA13/PARK7/PDCD6/PLAUR/PRELID1/PSMB8/PSMB9/PSME1/PSME2/PYCARD/S100A8/SERPINA1/SERPINB1/TIMP1/UBXN1/ARL6IP5/KLF4/TNFSF10/CYCS/CST3/IGBP1/CTSS/GPX1/S100A9/CTSL ##            Count ## GO:0042773    33 ## GO:0042775    33 ## GO:0019882    29 ## GO:0052547    41 ## Enrichment for Community 2 : ##                    ID ## GO:0002478 GO:0002478 ## GO:0048002 GO:0048002 ## GO:0019886 GO:0019886 ## GO:0002399 GO:0002399 ##                                                                                  Description ## GO:0002478                  antigen processing and presentation of exogenous peptide antigen ## GO:0048002                            antigen processing and presentation of peptide antigen ## GO:0019886 antigen processing and presentation of exogenous peptide antigen via MHC class II ## GO:0002399                                             MHC class II protein complex assembly ##            GeneRatio  BgRatio       pvalue     p.adjust       qvalue ## GO:0002478    13/107 40/18870 3.126225e-20 5.280053e-17 4.177735e-17 ## GO:0048002    15/107 71/18870 5.121998e-20 5.280053e-17 4.177735e-17 ## GO:0019886    12/107 31/18870 7.550123e-20 5.280053e-17 4.177735e-17 ## GO:0002399     8/107 16/18870 1.015014e-14 2.366111e-12 1.872137e-12 ##                                                                                                             geneID ## GO:0002478             CTSS/FCER1G/HLA-A/B2M/CTSL/CD74/HLA-DMA/HLA-DPB1/HLA-DQA1/HLA-DRA/HLA-DMB/HLA-DQA2/HLA-DQB1 ## GO:0048002 CTSS/FCER1G/HLA-A/HLA-B/B2M/CTSL/HLA-C/CD74/HLA-DMA/HLA-DPB1/HLA-DQA1/HLA-DRA/HLA-DMB/HLA-DQA2/HLA-DQB1 ## GO:0019886                   CTSS/FCER1G/B2M/CTSL/CD74/HLA-DMA/HLA-DPB1/HLA-DQA1/HLA-DRA/HLA-DMB/HLA-DQA2/HLA-DQB1 ## GO:0002399                                         B2M/HLA-DMA/HLA-DPB1/HLA-DQA1/HLA-DRA/HLA-DMB/HLA-DQA2/HLA-DQB1 ##            Count ## GO:0002478    13 ## GO:0048002    15 ## GO:0019886    12 ## GO:0002399     8 # Plot the top 4 terms per community dot_plot <- plot_go_terms(enrich_results, top_n_terms = 5, ontology = \"BP\") print(dot_plot) ## Save Results saveRDS(result, \"results.rds\") sessionInfo() ## R version 4.3.2 (2023-10-31) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/local/lib/R/lib/libRblas.so  ## LAPACK: /usr/local/lib/R/lib/libRlapack.so;  LAPACK version 3.11.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Asia/Singapore ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] flextable_0.9.7        ggraph_2.2.1           miEdgeR_0.1.0          ##  [4] pheatmap_1.0.12        ggVennDiagram_1.5.2    ggpubr_0.6.0           ##  [7] org.Hs.eg.db_3.18.0    AnnotationDbi_1.64.1   IRanges_2.36.0         ## [10] S4Vectors_0.40.2       Biobase_2.62.0         BiocGenerics_0.48.1    ## [13] clusterProfiler_4.10.1 ggplot2_3.5.1          dplyr_1.1.4            ## [16] igraph_2.1.1           SeuratObject_5.0.2     Seurat_4.3.0.1         ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.5                matrixStats_1.4.1       spatstat.sparse_3.1-0   ##   [4] bitops_1.0-9            enrichplot_1.22.0       HDO.db_0.99.1           ##   [7] httr_1.4.7              RColorBrewer_1.1-3      tools_4.3.2             ##  [10] sctransform_0.4.1       backports_1.5.0         utf8_1.2.4              ##  [13] R6_2.5.1                lazyeval_0.2.2          uwot_0.2.2              ##  [16] withr_3.0.2             sp_2.1-4                graphite_1.48.0         ##  [19] gridExtra_2.3           progressr_0.15.0        cli_3.6.3               ##  [22] textshaping_0.4.0       spatstat.explore_3.3-3  scatterpie_0.2.4        ##  [25] officer_0.6.7           labeling_0.4.3          sass_0.4.9              ##  [28] spatstat.data_3.1-2     askpass_1.2.1           ggridges_0.5.6          ##  [31] pbapply_1.7-2           pkgdown_2.1.1           systemfonts_1.1.0       ##  [34] yulab.utils_0.2.0       gson_0.1.0              DOSE_3.28.2             ##  [37] parallelly_1.39.0       RSQLite_2.3.7           generics_0.1.3          ##  [40] gridGraphics_0.5-1      ica_1.0-3               spatstat.random_3.3-2   ##  [43] zip_2.3.1               car_3.1-3               GO.db_3.18.0            ##  [46] Matrix_1.6-4            ggbeeswarm_0.7.2        fansi_1.0.6             ##  [49] abind_1.4-8             infotheo_1.2.0.1        lifecycle_1.0.4         ##  [52] yaml_2.3.10             carData_3.0-5           qvalue_2.34.0           ##  [55] Rtsne_0.17              grid_4.3.2              blob_1.2.4              ##  [58] promises_1.3.0          crayon_1.5.3            miniUI_0.1.1.1          ##  [61] lattice_0.21-9          cowplot_1.1.3           KEGGREST_1.42.0         ##  [64] pillar_1.9.0            knitr_1.48              fgsea_1.28.0            ##  [67] future.apply_1.11.3     codetools_0.2-19        fastmatch_1.1-4         ##  [70] leiden_0.4.3.1          glue_1.8.0              fontLiberation_0.1.0    ##  [73] ggfun_0.1.7             spatstat.univar_3.1-1   data.table_1.16.2       ##  [76] vctrs_0.6.5             png_0.1-8               treeio_1.26.0           ##  [79] spam_2.11-0             gtable_0.3.6            cachem_1.1.0            ##  [82] xfun_0.49               mime_0.12               tidygraph_1.3.1         ##  [85] survival_3.5-7          fitdistrplus_1.2-1      ROCR_1.0-11             ##  [88] nlme_3.1-163            ggtree_3.10.1           bit64_4.5.2             ##  [91] fontquiver_0.2.1        RcppAnnoy_0.0.22        GenomeInfoDb_1.38.8     ##  [94] bslib_0.8.0             irlba_2.3.5.1           vipor_0.4.7             ##  [97] KernSmooth_2.23-22      colorspace_2.1-1        DBI_1.2.3               ## [100] ggrastr_1.0.2           tidyselect_1.2.1        bit_4.5.0               ## [103] compiler_4.3.2          graph_1.80.0            xml2_1.3.6              ## [106] fontBitstreamVera_0.1.1 desc_1.4.3              plotly_4.10.4           ## [109] shadowtext_0.1.4        scales_1.3.0            lmtest_0.9-40           ## [112] rappdirs_0.3.3          stringr_1.5.1           digest_0.6.37           ## [115] goftest_1.2-3           spatstat.utils_3.1-1    rmarkdown_2.29          ## [118] XVector_0.42.0          htmltools_0.5.8.1       pkgconfig_2.0.3         ## [121] highr_0.11              fastmap_1.2.0           rlang_1.1.4             ## [124] htmlwidgets_1.6.4       shiny_1.9.1             farver_2.1.2            ## [127] jquerylib_0.1.4         zoo_1.8-12              jsonlite_1.8.9          ## [130] BiocParallel_1.36.0     GOSemSim_2.28.1         RCurl_1.98-1.16         ## [133] magrittr_2.0.3          Formula_1.2-5           GenomeInfoDbData_1.2.11 ## [136] ggplotify_0.1.2         dotCall64_1.2           patchwork_1.3.0         ## [139] munsell_0.5.1           Rcpp_1.0.13-1           ape_5.8                 ## [142] viridis_0.6.5           gdtools_0.4.1           reticulate_1.40.0       ## [145] stringi_1.8.4           zlibbioc_1.48.2         MASS_7.3-60             ## [148] plyr_1.8.9              parallel_4.3.2          listenv_0.9.1           ## [151] ggrepel_0.9.6           deldir_2.0-4            Biostrings_2.70.3       ## [154] graphlayouts_1.2.0      splines_4.3.2           tensor_1.5              ## [157] uuid_1.2-1              spatstat.geom_3.3-3     ggsignif_0.6.4          ## [160] reshape2_1.4.4          evaluate_1.0.1          tweenr_2.0.3            ## [163] httpuv_1.6.15           openssl_2.2.2           RANN_2.6.2              ## [166] tidyr_1.3.1             purrr_1.0.2             polyclip_1.10-7         ## [169] future_1.34.0           scattermore_1.2         ReactomePA_1.46.0       ## [172] ggforce_0.4.2           broom_1.0.7             xtable_1.8-4            ## [175] reactome.db_1.86.2      tidytree_0.4.6          rstatix_0.7.2           ## [178] later_1.3.2             viridisLite_0.4.2       ragg_1.3.3              ## [181] tibble_3.2.1            aplot_0.2.3             beeswarm_0.4.0          ## [184] memoise_2.0.1           cluster_2.1.4           globals_0.16.3"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About this vignette","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"tutorial demonstrates incorporate pseudotime information mutual-information (MI) network analysis using miEdgeR. bin cells along trajectory, build MI networks per bin, detect communities, track dynamic changes modules, hub genes, enrichment across pseudotime.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites:","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"R (≥ 4.2.0) Seurat object containing cluster metadata (RNA_snn_res.0.1) numeric pseudotime column Packages: miEdgeR, Seurat, igraph, clusterProfiler, org.Hs.eg.db, ggplot2, ggraph, flextable, pheatmap","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"extend MI-network workflow leveraging single-cell pseudotime. generating pseudotime vector, bin cells discrete stages, compute MI networks bin, analyze community structure, hub genes, functional enrichment evolve along trajectory.","code":"Note: This vignette requires the PBMC 3K dataset originally provided by the Seurat team. Please download the file pbmc3k.rds and place it in your working directory before running the code chunks."},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"load-libraries-and-data","dir":"Articles","previous_headings":"","what":"Load Libraries and Data","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Load dependencies read preprocessed Seurat object. Ensure object includes clustering pseudotime metadata.","code":"library(Seurat) library(miEdgeR) library(igraph) library(clusterProfiler) library(org.Hs.eg.db) library(dplyr) library(ggplot2) library(ggraph) library(flextable) library(pheatmap)  seurat_obj <- readRDS('pbmc3k.rds')"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"generate-or-verify-pseudotime","dir":"Articles","previous_headings":"","what":"Generate or Verify Pseudotime","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"generate mock pseudotime cluster 1 plot distribution.","code":"set.seed(123) cluster_1_cells <- colnames(seurat_obj)[seurat_obj@meta.data$RNA_snn_res.0.1 == \"1\"] mock_pseudotime <- numeric(ncol(seurat_obj)) names(mock_pseudotime) <- colnames(seurat_obj) mock_pseudotime[cluster_1_cells] <- seq(0, 1, length.out = length(cluster_1_cells)) other_cells <- setdiff(colnames(seurat_obj), cluster_1_cells) mock_pseudotime[other_cells] <- runif(length(other_cells), 0, 1) seurat_obj@meta.data$pseudotime <- mock_pseudotime[match(rownames(seurat_obj@meta.data), names(mock_pseudotime))] p_pt <- ggplot(data.frame(pseudotime = seurat_obj@meta.data[cluster_1_cells, \"pseudotime\"]), aes(x = pseudotime)) +   geom_histogram(bins = 30, fill = \"#f56642\", color = \"black\") +   labs(title = \"Pseudotime Distribution for Cluster 1\", x = \"Pseudotime\", y = \"Cell Count\") +   theme_minimal() print(p_pt)"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"compute-pseudotime-mi-networks","dir":"Articles","previous_headings":"","what":"Compute Pseudotime MI Networks","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"pseudotime bin (3 bins), extract cells, filter top variable genes, compute MI parallel, build thresholded igraph objects.","code":"pt_results <- miEdgeR::compute_pseudotime_mi_network(   seurat_obj,   cluster_id = \"1\",   cluster_field = \"RNA_snn_res.0.1\",   pseudotime_col = \"pseudotime\",   assay_name = \"RNA\",   counts_layer = \"counts\",   data_layer = \"data\",   min_expr_pct = 0.05,   top_n_genes = 3000,   min_cells_bin = 50,   n_bins = 3, ## set the number of pseudotime bins   n_cores = parallel::detectCores() - 5 ) ## Using adaptive nbins = 5 ## Using adaptive nbins = 5 ## Using adaptive nbins = 5 cat(\"Valid bins:\", sum(!sapply(pt_results, is.null)), \"\\n\") ## Valid bins: 3"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"summarize-bin-graphs","dir":"Articles","previous_headings":"","what":"Summarize Bin Graphs","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Quick summary node edge counts density per bin assess network complexity pseudotime. bins yielded valid networks consistent structure (2911 genes, ~211K edges, density ≈ 0.05), indicating stable co-regulatory patterns across pseudotime stages Cluster 1.","code":"for (bin in names(pt_results)) {   if (!is.null(pt_results[[bin]])) {     cat(\"Bin\", bin, \"- Vertices:\", igraph::vcount(pt_results[[bin]]), \"\\n\")     cat(\"Bin\", bin, \"- Edges:\", igraph::ecount(pt_results[[bin]]), \"\\n\")     cat(\"Bin\", bin, \"- Density:\", igraph::graph.density(pt_results[[bin]]), \"\\n\")   } else {     cat(\"Bin\", bin, \"- Skipped (insufficient cells)\\n\")   } } ## Bin PT1 - Vertices: 2911  ## Bin PT1 - Edges: 211806 ## Bin PT1 - Density: 0.05000726  ## Bin PT2 - Vertices: 2911  ## Bin PT2 - Edges: 211825  ## Bin PT2 - Density: 0.05001175  ## Bin PT3 - Vertices: 2911  ## Bin PT3 - Edges: 211818  ## Bin PT3 - Density: 0.05001009"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"community-detection","dir":"Articles","previous_headings":"","what":"Community Detection","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Detect robust gene modules per bin percolation (noise filtering) followed Leiden clustering neighborhood-overlap expansion. applied detect_communities_across_bins() identify stable gene communities across pseudotime bins. bin’s consensus MI network revealed large co-expression modules, Bin PT1 showing one major community (size: 1017), Bins PT2 PT3 displayed two communities (sizes: 957/590 970/694, respectively). suggests dynamic reorganization gene modules pseudotime progression Cluster 1.","code":"comm_results <- detect_communities_across_bins(   pt_results,   min_size = 50,   n_iterations = 100,   edge_fraction = 0.6,   freq_threshold = 0.5,   percentile = 0.95,   resolution_parameter = 0.5,   overlap_threshold = 0.1 ) ## Bin PT1 - Communities (size >= 50 ): 1  ## Sizes: 1018  ## Bin PT2 - Communities (size >= 50 ): 2  ## Sizes: 957 552  ## Bin PT3 - Communities (size >= 50 ): 2  ## Sizes: 970 659"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"community-sizes","dir":"Articles","previous_headings":"","what":"Community Sizes","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Bar plot showing module sizes vary across pseudotime bins.","code":"comm_sizes_df <- bind_rows(lapply(comm_results, function(res) {   data.frame(Bin = res$bin, Community = paste(\"Group\", seq_along(res$sizes)), Size = res$sizes) })) p_comm_sizes <- ggplot(comm_sizes_df, aes(x = Bin, y = Size, fill = Community)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   labs(title = \"Community Sizes Across Pseudotime Bins (C5)\", x = \"Pseudotime Bin\", y = \"Community Size\") +   theme_minimal() print(p_comm_sizes)"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"go-enrichment","dir":"Articles","previous_headings":"","what":"GO Enrichment","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Perform enrichment communities filtering housekeeping genes tend -represented due high mi-scores","code":"library(DOSE) enrich_results <- enrich_go(comm_results,semantic_space = 'GO',ontology = 'BP') ## Community 1 in bin PT1 - Genes after filtering: 1018  ## Community 1 in bin PT2 - Genes after filtering: 957  ## Community 2 in bin PT2 - Genes after filtering: 552  ## Community 1 in bin PT3 - Genes after filtering: 970  ## Community 2 in bin PT3 - Genes after filtering: 659  ## Enrichment for PT1_Group_1 : ##                    ID                                            Description ## GO:0042773 GO:0042773               ATP synthesis coupled electron transport ## GO:0042775 GO:0042775 mitochondrial ATP synthesis coupled electron transport ## GO:0019882 GO:0019882                    antigen processing and presentation ## GO:0042776 GO:0042776 proton motive force-driven mitochondrial ATP synthesis ##            GeneRatio   BgRatio       pvalue     p.adjust       qvalue ## GO:0042773    48/899 102/18870 2.999120e-36 7.247374e-33 5.493125e-33 ## GO:0042775    48/899 102/18870 2.999120e-36 7.247374e-33 5.493125e-33 ## GO:0019882    38/899 116/18870 4.451448e-22 2.151385e-19 1.630636e-19 ## GO:0042776    26/899  67/18870 1.247947e-17 4.308091e-15 3.265305e-15 ##                                                                                                                                                                                                                                                                                                                                   geneID ## GO:0042773 BID/CHCHD2/COX4I1/COX5A/COX5B/COX6A1/COX6B1/COX6C/COX7A2/COX7A2L/COX7C/COX8A/DGUOK/GHITM/ISCU/NDUFA1/NDUFA4/NDUFB1/NDUFB10/NDUFB2/NDUFB5/NDUFB7/NDUFB9/NDUFS5/NDUFS7/NDUFV2/PARK7/SDHB/UQCR10/UQCRC1/UQCRFS1/UQCRH/NDUFB4/NDUFC2/NDUFS6/CYCS/NDUFA3/SDHD/UQCRQ/UQCRC2/NDUFS8/NDUFA6/DNAJC15/NDUFS3/NDUFA2/NDUFS2/SDHC/NDUFAB1 ## GO:0042775 BID/CHCHD2/COX4I1/COX5A/COX5B/COX6A1/COX6B1/COX6C/COX7A2/COX7A2L/COX7C/COX8A/DGUOK/GHITM/ISCU/NDUFA1/NDUFA4/NDUFB1/NDUFB10/NDUFB2/NDUFB5/NDUFB7/NDUFB9/NDUFS5/NDUFS7/NDUFV2/PARK7/SDHB/UQCR10/UQCRC1/UQCRFS1/UQCRH/NDUFB4/NDUFC2/NDUFS6/CYCS/NDUFA3/SDHD/UQCRQ/UQCRC2/NDUFS8/NDUFA6/DNAJC15/NDUFS3/NDUFA2/NDUFS2/SDHC/NDUFAB1 ## GO:0019882                                                                      B2M/CALR/CD68/CD74/CTSD/CTSH/CTSL/CTSS/FCER1G/FGL2/HLA-A/HLA-C/HLA-DMA/HLA-DPA1/HLA-DPB1/HLA-DQA1/HLA-DQB1/HLA-DRA/HLA-DRB1/HLA-DRB5/HLA-E/IFI30/LILRB2/PSMB8/PSME1/PYCARD/RAB10/TAP1/WAS/TREX1/PDIA3/RAB32/HLA-DMB/SLC11A1/HLA-DQA2/UNC93B1/HLA-F/HLA-B ## GO:0042776                                                                                                                                          NDUFA1/NDUFA11/NDUFA13/NDUFB1/NDUFB10/NDUFB11/NDUFB2/NDUFB5/NDUFB7/NDUFB9/NDUFS5/NDUFS7/NDUFV2/SDHB/NDUFB4/NDUFC2/NDUFS6/NDUFA3/SDHD/NDUFS8/NDUFA6/NDUFS3/NDUFA2/NDUFS2/SDHC/NDUFAB1 ##            Count ## GO:0042773    48 ## GO:0042775    48 ## GO:0019882    38 ## GO:0042776    26 ## Enrichment for PT2_Group_1 : ##                    ID                                            Description ## GO:0042773 GO:0042773               ATP synthesis coupled electron transport ## GO:0042775 GO:0042775 mitochondrial ATP synthesis coupled electron transport ## GO:0019882 GO:0019882                    antigen processing and presentation ## GO:0002396 GO:0002396                           MHC protein complex assembly ##            GeneRatio   BgRatio       pvalue     p.adjust       qvalue ## GO:0042773    44/838 102/18870 1.370982e-32 3.289672e-29 2.445400e-29 ## GO:0042775    44/838 102/18870 1.370982e-32 3.289672e-29 2.445400e-29 ## GO:0019882    37/838 116/18870 4.069213e-22 1.952815e-19 1.451638e-19 ## GO:0002396    14/838  20/18870 3.156484e-15 8.415536e-13 6.255744e-13 ##                                                                                                                                                                                                                                                                                                      geneID ## GO:0042773 BID/CHCHD2/COX5A/COX5B/COX6A1/COX6B1/COX6C/COX7A2/COX7A2L/COX7C/COX8A/DGUOK/GHITM/ISCU/NDUFA2/NDUFA4/NDUFB10/NDUFB2/NDUFB5/NDUFB7/NDUFB9/NDUFS3/NDUFS5/NDUFS7/NDUFV2/PARK7/SDHB/SDHD/UQCR10/UQCRC1/UQCRFS1/UQCRH/UQCRQ/NDUFS8/NDUFA1/NDUFB4/NDUFA3/COX4I1/NDUFA12/UQCRC2/CYC1/NDUFC2/SDHC/NDUFS6 ## GO:0042775 BID/CHCHD2/COX5A/COX5B/COX6A1/COX6B1/COX6C/COX7A2/COX7A2L/COX7C/COX8A/DGUOK/GHITM/ISCU/NDUFA2/NDUFA4/NDUFB10/NDUFB2/NDUFB5/NDUFB7/NDUFB9/NDUFS3/NDUFS5/NDUFS7/NDUFV2/PARK7/SDHB/SDHD/UQCR10/UQCRC1/UQCRFS1/UQCRH/UQCRQ/NDUFS8/NDUFA1/NDUFB4/NDUFA3/COX4I1/NDUFA12/UQCRC2/CYC1/NDUFC2/SDHC/NDUFS6 ## GO:0019882                                              CALR/CD68/CD74/CTSD/CTSH/HLA-A/HLA-B/HLA-C/HLA-DMA/HLA-DPA1/HLA-DPB1/HLA-DQA1/HLA-DQB1/HLA-DRA/HLA-DRB1/HLA-DRB5/HLA-E/HLA-F/IFI30/PDIA3/PSMB8/PSME1/PYCARD/TAPBP/WAS/UNC93B1/FGL2/HLA-DMB/HLA-DQA2/SLC11A1/RAB10/CTSS/FCER1G/LILRB2/B2M/TREX1/CTSL ## GO:0002396                                                                                                                                                                                      CALR/HLA-DMA/HLA-DPA1/HLA-DPB1/HLA-DQA1/HLA-DQB1/HLA-DRA/HLA-DRB1/HLA-DRB5/PDIA3/TAPBP/HLA-DMB/HLA-DQA2/B2M ##            Count ## GO:0042773    44 ## GO:0042775    44 ## GO:0019882    37 ## GO:0002396    14 ## Enrichment for PT2_Group_2 : ##                    ID                                       Description ## GO:0019882 GO:0019882               antigen processing and presentation ## GO:0045333 GO:0045333                              cellular respiration ## GO:0002396 GO:0002396                      MHC protein complex assembly ## GO:0002501 GO:0002501 peptide antigen assembly with MHC protein complex ##            GeneRatio   BgRatio       pvalue     p.adjust       qvalue ## GO:0019882    33/494 116/18870 2.871758e-25 1.165646e-21 9.101960e-22 ## GO:0045333    36/494 243/18870 2.880842e-17 1.461667e-14 1.141344e-14 ## GO:0002396    12/494  20/18870 9.458936e-15 3.490347e-12 2.725441e-12 ## GO:0002501    12/494  20/18870 9.458936e-15 3.490347e-12 2.725441e-12 ##                                                                                                                                                                                                                                            geneID ## GO:0019882            CTSS/FCER1G/LILRB2/B2M/TREX1/CTSL/CD74/CTSD/CTSH/HLA-A/HLA-B/HLA-C/HLA-DMA/HLA-DPA1/HLA-DPB1/HLA-DQA1/HLA-DQB1/HLA-DRA/HLA-DRB1/HLA-DRB5/HLA-E/HLA-F/IFI30/PDIA3/PSMB8/PSME1/PYCARD/WAS/FGL2/HLA-DMB/HLA-DQA2/SLC11A1/RAB10 ## GO:0045333 TREX1/MDH2/MDH1/IDH2/ISCU/NDUFA11/NDUFB10/NDUFB11/NDUFB5/NDUFB9/OXA1L/PARK7/PRELID1/RHOA/SDHB/SDHD/SOD2/UQCR10/UQCRC1/UQCRFS1/UQCRH/UQCRQ/CHCHD10/CAT/NDUFS8/CHCHD5/NDUFA1/NDUFB4/COX4I1/SUCLG1/SCO2/NDUFA12/UQCRC2/NDUFC2/SDHC/NDUFS6 ## GO:0002396                                                                                                                                       B2M/HLA-DMA/HLA-DPA1/HLA-DPB1/HLA-DQA1/HLA-DQB1/HLA-DRA/HLA-DRB1/HLA-DRB5/PDIA3/HLA-DMB/HLA-DQA2 ## GO:0002501                                                                                                                                       B2M/HLA-DMA/HLA-DPA1/HLA-DPB1/HLA-DQA1/HLA-DQB1/HLA-DRA/HLA-DRB1/HLA-DRB5/PDIA3/HLA-DMB/HLA-DQA2 ##            Count ## GO:0019882    33 ## GO:0045333    36 ## GO:0002396    12 ## GO:0002501    12 ## Enrichment for PT3_Group_1 : ##                    ID                                            Description ## GO:0042773 GO:0042773               ATP synthesis coupled electron transport ## GO:0042775 GO:0042775 mitochondrial ATP synthesis coupled electron transport ## GO:0019882 GO:0019882                    antigen processing and presentation ## GO:0016032 GO:0016032                                          viral process ##            GeneRatio   BgRatio       pvalue     p.adjust       qvalue ## GO:0042773    46/853 102/18870 9.386109e-35 2.274254e-31 1.695922e-31 ## GO:0042775    46/853 102/18870 9.386109e-35 2.274254e-31 1.695922e-31 ## GO:0019882    36/853 116/18870 7.614100e-21 3.689793e-18 2.751495e-18 ## GO:0016032    66/853 432/18870 2.279391e-18 9.204940e-16 6.864165e-16 ##                                                                                                                                                                                                                                                                                                                                                                                                                       geneID ## GO:0042773                                                                                                      BID/CHCHD2/COX4I1/COX5A/COX5B/COX6A1/COX6B1/COX6C/COX7A2/COX7A2L/COX7C/COX8A/CYC1/CYCS/ISCU/NDUFA1/NDUFA4/NDUFB1/NDUFB10/NDUFB2/NDUFB4/NDUFB9/NDUFC2/NDUFS5/NDUFS7/PARK7/UQCR10/UQCRC2/UQCRFS1/UQCRH/SDHB/NDUFA3/NDUFAB1/NDUFS6/SDHC/NDUFV2/UQCRQ/DGUOK/GHITM/NDUFB7/SDHD/UQCRC1/NDUFA2/NDUFS8/NDUFB5/NDUFS2 ## GO:0042775                                                                                                      BID/CHCHD2/COX4I1/COX5A/COX5B/COX6A1/COX6B1/COX6C/COX7A2/COX7A2L/COX7C/COX8A/CYC1/CYCS/ISCU/NDUFA1/NDUFA4/NDUFB1/NDUFB10/NDUFB2/NDUFB4/NDUFB9/NDUFC2/NDUFS5/NDUFS7/PARK7/UQCR10/UQCRC2/UQCRFS1/UQCRH/SDHB/NDUFA3/NDUFAB1/NDUFS6/SDHC/NDUFV2/UQCRQ/DGUOK/GHITM/NDUFB7/SDHD/UQCRC1/NDUFA2/NDUFS8/NDUFB5/NDUFS2 ## GO:0019882                                                                                                                                                                        CD68/CD74/CTSD/CTSH/FGL2/HLA-A/HLA-C/HLA-DMA/HLA-DPA1/HLA-DPB1/HLA-DQA1/HLA-DQA2/HLA-DQB1/HLA-DRA/HLA-DRB1/HLA-DRB5/HLA-E/HLA-F/IFI30/LILRB2/PSMB8/PSME1/PYCARD/RAB10/RAB32/SLC11A1/WAS/HLA-B/HLA-DMB/CALR/PDIA3/TAP1/CTSS/FCER1G/B2M/CTSL ## GO:0016032 APOBEC3A/BSG/BST2/CD4/CD55/CD74/CFL1/CHMP1B/CHMP2A/CHMP4A/CSNK2B/CTSB/CXCR4/DDX5/DEK/DYNLT1/EIF3D/EIF3F/EIF3G/EIF3L/HLA-DRB1/HMGB1/HSP90AB1/HSPA8/ISG15/JUN/LAMTOR5/LGALS9/PABPC1/PCBP1/PCBP2/PPIA/PPIB/RAB7A/RAN/SNX3/TNFRSF14/TRIM22/VAMP8/VAPA/VPS28/ZFP36/APOBEC3B/OAS1/IRF7/EEF1A1/SMARCB1/PLSCR1/MX1/CHMP5/P4HB/SPCS1/CSDE1/CHMP4B/IFIT1/BANF1/SELPLG/FCN1/IFITM2/IFITM3/LGALS1/LY6E/IFITM1/CCL3/CSF1R/CTSL ##            Count ## GO:0042773    46 ## GO:0042775    46 ## GO:0019882    36 ## GO:0016032    66 ## Enrichment for PT3_Group_2 : ##                    ID                                            Description ## GO:0019882 GO:0019882                    antigen processing and presentation ## GO:0042773 GO:0042773               ATP synthesis coupled electron transport ## GO:0042775 GO:0042775 mitochondrial ATP synthesis coupled electron transport ## GO:0042776 GO:0042776 proton motive force-driven mitochondrial ATP synthesis ##            GeneRatio   BgRatio       pvalue     p.adjust       qvalue ## GO:0019882    32/592 116/18870 1.128425e-21 4.039534e-18 3.132397e-18 ## GO:0042773    30/592 102/18870 2.739286e-21 4.039534e-18 3.132397e-18 ## GO:0042775    30/592 102/18870 2.739286e-21 4.039534e-18 3.132397e-18 ## GO:0042776    20/592  67/18870 9.104863e-15 2.237773e-12 1.735248e-12 ##                                                                                                                                                                                                                        geneID ## GO:0019882 CTSS/FCER1G/B2M/CTSL/CTSD/CTSH/FGL2/HLA-A/HLA-C/HLA-DPA1/HLA-DPB1/HLA-DQA1/HLA-DQA2/HLA-DQB1/HLA-DRA/HLA-DRB1/HLA-DRB5/HLA-E/IFI30/LILRB2/PSMB8/PSME1/PYCARD/RAB10/RAB32/SLC11A1/WAS/HLA-B/HLA-DMB/CALR/PDIA3/TAP1 ## GO:0042773             BID/COX4I1/ISCU/NDUFA1/NDUFA4/NDUFB1/NDUFB10/NDUFB4/NDUFB9/NDUFC2/NDUFS5/NDUFS7/PARK7/UQCR10/UQCRC2/UQCRFS1/UQCRH/SDHB/NDUFA3/NDUFAB1/NDUFV2/UQCRQ/DGUOK/GHITM/NDUFB7/SDHD/UQCRC1/NDUFA2/NDUFS8/NDUFS2 ## GO:0042775             BID/COX4I1/ISCU/NDUFA1/NDUFA4/NDUFB1/NDUFB10/NDUFB4/NDUFB9/NDUFC2/NDUFS5/NDUFS7/PARK7/UQCR10/UQCRC2/UQCRFS1/UQCRH/SDHB/NDUFA3/NDUFAB1/NDUFV2/UQCRQ/DGUOK/GHITM/NDUFB7/SDHD/UQCRC1/NDUFA2/NDUFS8/NDUFS2 ## GO:0042776                                                                       NDUFA1/NDUFA11/NDUFA13/NDUFB1/NDUFB10/NDUFB11/NDUFB4/NDUFB9/NDUFC2/NDUFS5/NDUFS7/SDHB/NDUFA3/NDUFAB1/NDUFV2/NDUFB7/SDHD/NDUFA2/NDUFS8/NDUFS2 ##            Count ## GO:0019882    32 ## GO:0042773    30 ## GO:0042775    30 ## GO:0042776    20 # Plot the top 4 terms per community dot_plot <- plot_go_terms(enrich_results, top_n_terms = 5, ontology = \"BP\") print(dot_plot) ## Save Results"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"hub-gene-changes-across-pseudotime","dir":"Articles","previous_headings":"","what":"Hub Gene Changes Across Pseudotime","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Identify top hub genes module tabulate presence across bins. Hub Gene Bins Present Communities CAPZB PT1 Group 1 HIGD2A PT3 Group 1 HLA-DPA1 PT3, PT3 Group 1, Group 2 HLA-DRB5 PT1, PT2 Group 1, Group 2 ITGB2 PT2 Group 1 LSP1 PT3 Group 1 MYL12B PT3 Group 2 NEDD8 PT2, PT2 Group 1, Group 2 NPM1 PT3, PT3 Group 1, Group 2 PSMA7 PT2, PT2 Group 1, Group 2 S100A8 PT1, PT2, PT2, PT3, PT3 Group 1, Group 2 S100A9 PT1 Group 1 SLC25A3 PT1 Group 1 SPI1 PT3 Group 2 TMA7 PT2 Group 1 UBB PT2 Group 2","code":"hub_changes <- bind_rows(lapply(comm_results, function(res) {   bin <- res$bin   hub_data <- lapply(seq_along(res$communities), function(i) {     genes <- res$communities[[i]]     subgraph <- igraph::induced_subgraph(pt_results[[bin]], igraph::V(pt_results[[bin]])[name %in% genes])     if (igraph::vcount(subgraph) == 0) return(NULL)     deg <- igraph::degree(subgraph)     top_hubs <- names(sort(deg, decreasing = TRUE))[1:min(5, length(deg))]     data.frame(Bin = bin, Community = paste(\"Group\", i), Hub_Gene = top_hubs, stringsAsFactors = FALSE)   })   do.call(rbind, hub_data) }))  # Visualize hub gene presence across bins hub_presence <- hub_changes %>%   group_by(Hub_Gene) %>%   summarise(Bins_Present = paste(Bin, collapse = \", \"), Communities = paste(unique(Community), collapse = \", \"), .groups = \"drop\") ft_hub <- flextable::flextable(hub_presence) %>%   flextable::autofit() %>%   flextable::set_header_labels(Hub_Gene = \"Hub Gene\", Bins_Present = \"Bins Present\", Communities = \"Communities\") %>%   flextable::bg(part = \"header\", bg = \"gray\") %>%   flextable::theme_vanilla() ft_hub"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"hub-genes","dir":"Articles","previous_headings":"","what":"Hub Genes","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Identify top hub genes communities pseudotime bin. Bin Group Top Hub Genes PT1 Group 1 S100A8, HLA-DRB5, S100A9, CAPZB, SLC25A3, RHOG, UBE2D3, NDUFA11, ATP6V0E1, PSMB3 PT2 Group 1 S100A8, PSMA7, NEDD8, TMA7, ITGB2, UBB, SSR4, LGALS9, HLA-DRB5, CSTB Group 2 S100A8, PSMA7, NEDD8, UBB, HLA-DRB5, TMA7, HLA-DPA1, SSR4, PPP1CA, GRN PT3 Group 1 HLA-DPA1, NPM1, S100A8, HIGD2A, LSP1, MYL12B, ATP5D, C11orf31, CIRBP, SPI1 Group 2 HLA-DPA1, NPM1, S100A8, MYL12B, SPI1, S100A9, LSP1, SLC25A5, VAMP8, IFITM2","code":"ft <- summarize_hub_genes_across_bins(comm_results, pt_results, top_n = 10) ft"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"edge-gainloss-analysis","dir":"Articles","previous_headings":"","what":"Edge Gain/Loss Analysis","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Compare stable, gained, lost edges consecutive pseudotime bins.  explore dynamic gene interactions, used plot_edge_gain_loss() quantify visualize stable, gained, lost edges consecutive pseudotime bins. function returns summary plot detailed edge lists transition. example, PT1→PT2, 120K edges gained lost, ~87K remained stable. Exported edge tables (e.g., ‘gained_edges_PT1_to_PT2.csv’) can used downstream analysis context-specific co-regulation.","code":"result <- plot_edge_gain_loss(pt_results, cluster_id = \"C1\") ## Edges in PT1 : 211806  ## Edges in PT2 : 211825  ## Stable edges ( PT1 to PT2 ): 87964  ## Gained edges ( PT1 to PT2 ): 123861  ## Lost edges ( PT1 to PT2 ): 123842  ## Edges in PT2 : 211825  ## Edges in PT3 : 211818  ## Stable edges ( PT2 to PT3 ): 91598  ## Gained edges ( PT2 to PT3 ): 120220  ## Lost edges ( PT2 to PT3 ): 120227 p_gl <- result$plot  # Correct assignment print(p_gl) # Inspect specific edges (e.g., for PT1 to PT2) pt1_to_pt2_edges <- result$edge_details[[\"PT1 to PT2\"]] cat(\"Gained edges (PT1 to PT2):\\n\") ## Gained edges (PT1 to PT2): if (!is.null(pt1_to_pt2_edges$gained)) {   print(head(pt1_to_pt2_edges$gained, 10))   write.csv(pt1_to_pt2_edges$gained, \"gained_edges_PT1_to_PT2.csv\", row.names = FALSE) } else {   cat(\"No gained edges found.\\n\") } ##    edge_changes$gained ## 1          CCL3_S100A8 ## 2        MT-CO2_S100A8 ## 3         S100A8_ZFP36 ## 4       MT-ATP6_S100A8 ## 5          LY6E_S100A8 ## 6     LINC00936_S100A8 ## 7      C1orf162_S100A8 ## 8         ANXA2_S100A8 ## 9       NDUFA13_S100A8 ## 10         CD63_S100A8 cat(\"Lost edges (PT1 to PT2):\\n\") ## Lost edges (PT1 to PT2): if (!is.null(pt1_to_pt2_edges$lost)) {   print(head(pt1_to_pt2_edges$lost, 10))   write.csv(pt1_to_pt2_edges$lost, \"lost_edges_PT1_to_PT2.csv\", row.names = FALSE) } else {   cat(\"No lost edges found.\\n\") } ##    edge_changes$lost ## 1      S100A8_STXBP2 ## 2        GPX4_S100A8 ## 3        GMFG_S100A8 ## 4       S100A8_SF3B5 ## 5        EMP3_S100A8 ## 6       CNPY3_S100A8 ## 7        CD37_S100A8 ## 8     S100A8_WDR83OS ## 9       S100A8_UQCRH ## 10    ANAPC16_S100A8 cat(\"Stable edges (PT1 to PT2):\\n\") ## Stable edges (PT1 to PT2): if (!is.null(pt1_to_pt2_edges$stable)) {   print(head(pt1_to_pt2_edges$stable, 10))   write.csv(pt1_to_pt2_edges$stable, \"stable_edges_PT1_to_PT2.csv\", row.names = FALSE) } else {   cat(\"No stable edges found.\\n\") } ##    edge_changes$stable ## 1        S100A8_S100A9 ## 2        FCGR3A_S100A8 ## 3        LGALS2_S100A8 ## 4      HLA-DPB1_S100A8 ## 5        IFITM2_S100A8 ## 6        IFITM3_S100A8 ## 7      HLA-DPA1_S100A8 ## 8          FCN1_S100A8 ## 9          GPX1_S100A8 ## 10       NFKBIA_S100A8 # Repeat for PT2 to PT3 pt2_to_pt3_edges <- result$edge_details[[\"PT2 to PT3\"]] cat(\"Gained edges (PT2 to PT3):\\n\") ## Gained edges (PT2 to PT3): if (!is.null(pt2_to_pt3_edges$gained)) {   print(head(pt2_to_pt3_edges$gained, 10))   write.csv(pt2_to_pt3_edges$gained, \"gained_edges_PT2_to_PT3.csv\", row.names = FALSE) } else {   cat(\"No gained edges found.\\n\") } ##    edge_changes$gained ## 1        MT-ND2_S100A8 ## 2        S100A8_STXBP2 ## 3          EMP3_S100A8 ## 4          GPX4_S100A8 ## 5         ALDH2_S100A8 ## 6        EIF4A1_S100A8 ## 7         CLIC1_S100A8 ## 8          GMFG_S100A8 ## 9         S100A8_SF3B5 ## 10        CNPY3_S100A8"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"gene-pseudotime-correlation-density","dir":"Articles","previous_headings":"","what":"Gene-Pseudotime Correlation Density","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Plot distribution gene expression–pseudotime correlations gauge overall trends.","code":"gc_df <- gene_pt_correlation(   seurat_obj[, seurat_obj@meta.data$RNA_snn_res.0.1 == \"1\"],   pseudotime_col = \"pseudotime\", assay = \"RNA\", layer = \"data\", method = \"spearman\" ) %>% mutate(Cluster = \"C1\") p_gc <- ggplot(gc_df, aes(x = Cor, color = Cluster, fill = Cluster)) +   geom_density(alpha = 0.3, color = \"#00B6EB\", fill = \"#00B6EB\") +   labs(title = \"Gene-Pseudotime Correlation Density\", x = \"Spearman ρ\", y = \"Density\") +   theme_minimal() print(p_gc)"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"top-10-genes-by-correlation","dir":"Articles","previous_headings":"","what":"Top ±10 Genes by Correlation","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Plot top 10 positively negatively correlated genes.","code":"top_genes_df <- gc_df %>%   filter(!is.na(Cor)) %>%   slice_max(Cor, n = 10) %>%   mutate(Direction = \"Positive\") %>%   bind_rows(     gc_df %>% filter(!is.na(Cor)) %>% slice_min(Cor, n = 10) %>% mutate(Direction = \"Negative\")   ) %>%   mutate(Gene = factor(Gene, levels = unique(Gene))) p_top_genes <- ggplot(top_genes_df, aes(x = Cor, y = Gene, fill = Direction)) +   geom_col(show.legend = FALSE) +   facet_grid(Direction ~ Cluster, scales = \"free_y\") +   labs(title = \"Top ±10 Genes by Pseudotime Correlation\", x = \"Spearman ρ\", y = \"\") +   theme_minimal() print(p_top_genes)"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"heatmap-of-top-10-genes","dir":"Articles","previous_headings":"","what":"Heatmap of Top 10 Genes","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Heatmap top 10 genes pseudotime correlation.","code":"top10 <- gc_df %>% slice_max(Cor, n = 10) %>% pull(Gene) %>% unique() valid_cells <- colnames(seurat_obj)[seurat_obj@meta.data$RNA_snn_res.0.1 == \"1\" & !is.na(seurat_obj@meta.data$pseudotime)] cells <- valid_cells[order(seurat_obj@meta.data[valid_cells, \"pseudotime\"])] expr <- GetAssayData(seurat_obj, assay = \"RNA\", slot = \"data\") present <- intersect(top10, rownames(expr)) missing <- setdiff(top10, rownames(expr)) mat <- expr[present, cells, drop = FALSE] if (length(missing)) {   mat2 <- matrix(NA, nrow = length(missing), ncol = length(cells), dimnames = list(missing, cells))   mat <- rbind(mat, mat2) } mat <- mat[top10, , drop = FALSE] pheatmap(mat, cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE,          main = \"Top 10 Genes by Pseudotime Correlation\")"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"module-score-trajectories","dir":"Articles","previous_headings":"","what":"Module-Score Trajectories","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Compute plot module scores PT2 communities along pseudotime.","code":"# Define custom modules to plot custom_mods <- list(   M1 = c('S100A8', 'UBB', 'SSR4'),   M2 = c('LGALS9', 'HLA-DPA1') )  # Plot trajectories for custom modules in PT2 p_modtraj <- plot_module_trajectories(   comm_results, seurat_obj, bin_index = 2,    custom_modules = custom_mods,   cluster_field = \"RNA_snn_res.0.1\", cluster_id = \"1\", assay = \"RNA\" ) print(p_modtraj)"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"edge-pseudotime-correlation-density","dir":"Articles","previous_headings":"","what":"Edge-Pseudotime Correlation Density","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Compute plot density edge-pseudotime correlations specified pseudotime bin. evaluated gene-gene interactions change pseudotime computing Spearman correlations edge expression pseudotime PT2. Using plot_edge_correlations(), observed edge correlations centered around zero across groups. Community 1 Community 2 show similar distributions, subtle differences suggest distinct temporal dynamics within across gene modules.","code":"p_ec <- plot_edge_correlations(   comm_results, pt_results, seurat_obj, bin_name = \"PT2\",   cluster_field = \"RNA_snn_res.0.1\", cluster_id = \"1\", assay = \"RNA\",   layer = \"data\", pseudotime_col = \"pseudotime\", method = \"spearman\",   edge_threshold = 0.95, n_cores = 36 ) print(p_ec)"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"combined-summary-plots","dir":"Articles","previous_headings":"","what":"Combined Summary Plots","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"Arrange key plots composite figure quick overview.","code":"(p_pt | p_gc) / (p_ec | p_gl) / p_modtraj"},{"path":"https://iichelhadi.github.io/miEdgeR/articles/pseudotime_mi_network.html","id":"save-results","dir":"Articles","previous_headings":"","what":"Save Results","title":"Pseudotime-Aware MI Network Analysis with miEdgeR","text":"","code":"# saveRDS(pt_results, \"pseudotime_results.rds\") # saveRDS(comm_results, \"pseudotime_communities.rds\") # saveRDS(enrich_results, \"enrich_results.rds\") sessionInfo() ## R version 4.3.2 (2023-10-31) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/local/lib/R/lib/libRblas.so  ## LAPACK: /usr/local/lib/R/lib/libRlapack.so;  LAPACK version 3.11.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Asia/Singapore ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] DOSE_3.28.2            flextable_0.9.7        ggraph_2.2.1           ##  [4] miEdgeR_0.1.0          pheatmap_1.0.12        ggVennDiagram_1.5.2    ##  [7] ggpubr_0.6.0           org.Hs.eg.db_3.18.0    AnnotationDbi_1.64.1   ## [10] IRanges_2.36.0         S4Vectors_0.40.2       Biobase_2.62.0         ## [13] BiocGenerics_0.48.1    clusterProfiler_4.10.1 ggplot2_3.5.1          ## [16] dplyr_1.1.4            igraph_2.1.1           SeuratObject_5.0.2     ## [19] Seurat_4.3.0.1         ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.5                matrixStats_1.4.1       spatstat.sparse_3.1-0   ##   [4] bitops_1.0-9            enrichplot_1.22.0       HDO.db_0.99.1           ##   [7] httr_1.4.7              RColorBrewer_1.1-3      tools_4.3.2             ##  [10] sctransform_0.4.1       backports_1.5.0         utf8_1.2.4              ##  [13] R6_2.5.1                mgcv_1.9-0              lazyeval_0.2.2          ##  [16] uwot_0.2.2              withr_3.0.2             sp_2.1-4                ##  [19] graphite_1.48.0         gridExtra_2.3           progressr_0.15.0        ##  [22] cli_3.6.3               textshaping_0.4.0       spatstat.explore_3.3-3  ##  [25] scatterpie_0.2.4        officer_0.6.7           labeling_0.4.3          ##  [28] sass_0.4.9              spatstat.data_3.1-2     askpass_1.2.1           ##  [31] ggridges_0.5.6          pbapply_1.7-2           pkgdown_2.1.1           ##  [34] systemfonts_1.1.0       yulab.utils_0.2.0       gson_0.1.0              ##  [37] parallelly_1.39.0       RSQLite_2.3.7           generics_0.1.3          ##  [40] gridGraphics_0.5-1      ica_1.0-3               spatstat.random_3.3-2   ##  [43] zip_2.3.1               car_3.1-3               GO.db_3.18.0            ##  [46] Matrix_1.6-4            fansi_1.0.6             abind_1.4-8             ##  [49] infotheo_1.2.0.1        lifecycle_1.0.4         yaml_2.3.10             ##  [52] carData_3.0-5           qvalue_2.34.0           Rtsne_0.17              ##  [55] grid_4.3.2              blob_1.2.4              promises_1.3.0          ##  [58] crayon_1.5.3            miniUI_0.1.1.1          lattice_0.21-9          ##  [61] cowplot_1.1.3           KEGGREST_1.42.0         pillar_1.9.0            ##  [64] knitr_1.48              fgsea_1.28.0            future.apply_1.11.3     ##  [67] codetools_0.2-19        fastmatch_1.1-4         leiden_0.4.3.1          ##  [70] glue_1.8.0              fontLiberation_0.1.0    ggfun_0.1.7             ##  [73] spatstat.univar_3.1-1   data.table_1.16.2       vctrs_0.6.5             ##  [76] png_0.1-8               treeio_1.26.0           spam_2.11-0             ##  [79] gtable_0.3.6            cachem_1.1.0            xfun_0.49               ##  [82] mime_0.12               tidygraph_1.3.1         survival_3.5-7          ##  [85] fitdistrplus_1.2-1      ROCR_1.0-11             nlme_3.1-163            ##  [88] ggtree_3.10.1           bit64_4.5.2             fontquiver_0.2.1        ##  [91] RcppAnnoy_0.0.22        GenomeInfoDb_1.38.8     bslib_0.8.0             ##  [94] irlba_2.3.5.1           KernSmooth_2.23-22      colorspace_2.1-1        ##  [97] DBI_1.2.3               tidyselect_1.2.1        bit_4.5.0               ## [100] compiler_4.3.2          graph_1.80.0            xml2_1.3.6              ## [103] fontBitstreamVera_0.1.1 desc_1.4.3              plotly_4.10.4           ## [106] shadowtext_0.1.4        scales_1.3.0            lmtest_0.9-40           ## [109] rappdirs_0.3.3          stringr_1.5.1           digest_0.6.37           ## [112] goftest_1.2-3           spatstat.utils_3.1-1    rmarkdown_2.29          ## [115] XVector_0.42.0          htmltools_0.5.8.1       pkgconfig_2.0.3         ## [118] highr_0.11              fastmap_1.2.0           rlang_1.1.4             ## [121] htmlwidgets_1.6.4       shiny_1.9.1             farver_2.1.2            ## [124] jquerylib_0.1.4         zoo_1.8-12              jsonlite_1.8.9          ## [127] BiocParallel_1.36.0     GOSemSim_2.28.1         RCurl_1.98-1.16         ## [130] magrittr_2.0.3          Formula_1.2-5           GenomeInfoDbData_1.2.11 ## [133] ggplotify_0.1.2         dotCall64_1.2           patchwork_1.3.0         ## [136] munsell_0.5.1           Rcpp_1.0.13-1           ape_5.8                 ## [139] viridis_0.6.5           gdtools_0.4.1           reticulate_1.40.0       ## [142] stringi_1.8.4           zlibbioc_1.48.2         MASS_7.3-60             ## [145] plyr_1.8.9              parallel_4.3.2          listenv_0.9.1           ## [148] ggrepel_0.9.6           deldir_2.0-4            Biostrings_2.70.3       ## [151] graphlayouts_1.2.0      splines_4.3.2           tensor_1.5              ## [154] uuid_1.2-1              spatstat.geom_3.3-3     ggsignif_0.6.4          ## [157] reshape2_1.4.4          evaluate_1.0.1          tweenr_2.0.3            ## [160] httpuv_1.6.15           openssl_2.2.2           RANN_2.6.2              ## [163] tidyr_1.3.1             purrr_1.0.2             polyclip_1.10-7         ## [166] future_1.34.0           scattermore_1.2         ReactomePA_1.46.0       ## [169] ggforce_0.4.2           broom_1.0.7             xtable_1.8-4            ## [172] reactome.db_1.86.2      tidytree_0.4.6          rstatix_0.7.2           ## [175] later_1.3.2             viridisLite_0.4.2       ragg_1.3.3              ## [178] tibble_3.2.1            aplot_0.2.3             memoise_2.0.1           ## [181] cluster_2.1.4           globals_0.16.3"},{"path":"https://iichelhadi.github.io/miEdgeR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Elhadi Iich. Author, maintainer.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Iich E (2025). miEdgeR: Mutual Information Network Hypergraph Analysis Seurat Data. R package version 0.1.0, https://iichelhadi.github.io/miEdgeR/.","code":"@Manual{,   title = {miEdgeR: Mutual Information Network and Hypergraph Analysis for Seurat Data},   author = {Elhadi Iich},   year = {2025},   note = {R package version 0.1.0},   url = {https://iichelhadi.github.io/miEdgeR/}, }"},{"path":"https://iichelhadi.github.io/miEdgeR/index.html","id":"miedger","dir":"","previous_headings":"","what":"miEdgeR - Mutual Information Network and Hypergraph Analysis","title":"miEdgeR - Mutual Information Network and Hypergraph Analysis","text":"Mutual-information based gene network analysis, hypergraph construction & pseudotime-aware workflows single-cell RNA-seq data. miEdgeR provides streamlined pipeline single‐cell RNA‐seq data :  Workflow schematic","code":"Builds nonlinear gene–gene networks via mutual information  Detects robust gene modules with the Leiden community algorithm  Encodes overlapping modules as a hypergraph  Quantifies module dynamics along pseudotime trajectories"},{"path":"https://iichelhadi.github.io/miEdgeR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"miEdgeR - Mutual Information Network and Hypergraph Analysis","text":"can install development version GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"iichelhadi/miEdgeR\")"},{"path":"https://iichelhadi.github.io/miEdgeR/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"miEdgeR - Mutual Information Network and Hypergraph Analysis","text":"","code":"# 1. Load libraries and data library(Seurat) library(miEdgeR) library(igraph) library(dplyr) library(ggplot2) library(ggraph) library(flextable)  # Replace with your own file if needed: seurat_obj <- readRDS(\"pbmc3k.rds\")  # 2. Build the MI network for cluster \"1\" result <- compute_mi_network(   seurat_obj,   cluster_id     = \"1\",   cluster_field  = \"RNA_snn_res.0.1\",   assay_name     = \"RNA\",   min_expr_pct   = 0.05,   top_n_genes    = 3000,   n_cores        = parallel::detectCores() )  # 3. Threshold at the 95th percentile g <- build_mi_graph(   result$mi_matrix,   threshold_method = \"percentile\",   percentile       = 0.95 )  # 4. Denoise via percolation g_consensus <- percolate_graph(   g,   n_iterations   = 100,   edge_fraction  = 0.6,   freq_threshold = 0.5,   percentile     = 0.95 )  # 5. Detect communities and make a hypergraph communities <- detect_communities(g_consensus) hg          <- make_hypergraph(communities)  # 6. Visualize the hypergraph plot_hypergraph(hg, title = \"Overlapping Gene Modules\")"},{"path":"https://iichelhadi.github.io/miEdgeR/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"miEdgeR - Mutual Information Network and Hypergraph Analysis","text":"MI Network Hypergraph Analysis miEdgeR Pseudotime-Aware MI Network Analysis miEdgeR","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/build_mi_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Build MI Graph — build_mi_graph","title":"Build MI Graph — build_mi_graph","text":"Build MI Graph","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/build_mi_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build MI Graph — build_mi_graph","text":"","code":"build_mi_graph(   mi_matrix,   threshold_method = \"percentile\",   percentile = 0.95,   fixed_threshold = NULL )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/build_mi_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build MI Graph — build_mi_graph","text":"mi_matrix Mutual information matrix threshold_method Threshold method, either \"percentile\" \"fixed\" percentile Percentile thresholding (used threshold_method = \"percentile\") fixed_threshold Fixed MI value thresholding (used threshold_method = \"fixed\")","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/build_mi_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build MI Graph — build_mi_graph","text":"igraph object","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/choose_adaptive_nbins.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose Adaptive Number of Bins — choose_adaptive_nbins","title":"Choose Adaptive Number of Bins — choose_adaptive_nbins","text":"Choose Adaptive Number Bins","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/choose_adaptive_nbins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose Adaptive Number of Bins — choose_adaptive_nbins","text":"","code":"choose_adaptive_nbins(   expr_data,   min_bins = 5,   max_bins = 30,   min_cells_per_bin = 75 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/choose_adaptive_nbins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose Adaptive Number of Bins — choose_adaptive_nbins","text":"expr_data Expression data min_bins Minimum number bins max_bins Maximum number bins min_cells_per_bin Minimum cells per bin","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/choose_adaptive_nbins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose Adaptive Number of Bins — choose_adaptive_nbins","text":"Number bins","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_cmi_matrix_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Conditional MI Matrix in Parallel — compute_cmi_matrix_parallel","title":"Compute Conditional MI Matrix in Parallel — compute_cmi_matrix_parallel","text":"Compute Conditional MI Matrix Parallel","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_cmi_matrix_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Conditional MI Matrix in Parallel — compute_cmi_matrix_parallel","text":"","code":"compute_cmi_matrix_parallel(   expr_subset,   pt_vec,   n_cores = parallel::detectCores() - 10,   nbins = 10 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_cmi_matrix_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Conditional MI Matrix in Parallel — compute_cmi_matrix_parallel","text":"expr_subset Expression data subset pt_vec Pseudotime vector n_cores Number cores nbins Number bins","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_cmi_matrix_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Conditional MI Matrix in Parallel — compute_cmi_matrix_parallel","text":"Conditional MI matrix","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_mi_matrix_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Mutual Information Matrix in Parallel — compute_mi_matrix_parallel","title":"Compute Mutual Information Matrix in Parallel — compute_mi_matrix_parallel","text":"Compute Mutual Information Matrix Parallel","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_mi_matrix_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Mutual Information Matrix in Parallel — compute_mi_matrix_parallel","text":"","code":"compute_mi_matrix_parallel(expr_subset, n_cores = parallel::detectCores() - 10)"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_mi_matrix_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Mutual Information Matrix in Parallel — compute_mi_matrix_parallel","text":"expr_subset Expression data subset n_cores Number cores","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_mi_matrix_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Mutual Information Matrix in Parallel — compute_mi_matrix_parallel","text":"MI matrix","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_mi_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute MI Network for a Cluster — compute_mi_network","title":"Compute MI Network for a Cluster — compute_mi_network","text":"Compute MI Network Cluster","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_mi_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute MI Network for a Cluster — compute_mi_network","text":"","code":"compute_mi_network(   seurat_obj,   cluster_id,   cluster_field,   assay_name = \"RNA\",   counts_layer = \"counts\",   data_layer = \"data\",   top_n_genes = 5000,   max_cells = 1500,   min_expr_pct = 0.05,   n_cores = parallel::detectCores() - 1 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_mi_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute MI Network for a Cluster — compute_mi_network","text":"seurat_obj Seurat object cluster_id Cluster ID cluster_field Metadata column name clusters assay_name Assay name (default: \"RNA\") counts_layer Layer counts data (default: \"counts\") data_layer Layer normalized data (default: \"data\") top_n_genes Number top variable genes max_cells Maximum number cells min_expr_pct Minimum expression percentage n_cores Number cores","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_mi_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute MI Network for a Cluster — compute_mi_network","text":"List containing graph, MI matrix, genes","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_pseudotime_mi_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Pseudotime-Aware MI Networks — compute_pseudotime_mi_network","title":"Compute Pseudotime-Aware MI Networks — compute_pseudotime_mi_network","text":"Compute Pseudotime-Aware MI Networks","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_pseudotime_mi_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Pseudotime-Aware MI Networks — compute_pseudotime_mi_network","text":"","code":"compute_pseudotime_mi_network(   seurat_obj,   cluster_id,   cluster_field,   pseudotime_col,   assay_name = \"RNA\",   counts_layer = \"counts\",   data_layer = \"data\",   n_bins = 5,   min_cells_bin = 75,   top_n_genes = 5000,   max_cells = 1500,   min_expr_pct = 0.05,   n_cores = parallel::detectCores() - 1,   bin_method = \"quantile\" )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_pseudotime_mi_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Pseudotime-Aware MI Networks — compute_pseudotime_mi_network","text":"seurat_obj Seurat object cluster_id Cluster ID cluster_field Metadata column name clusters pseudotime_col Metadata column name pseudotime assay_name Assay name (default: \"RNA\") counts_layer Layer counts data (default: \"counts\") data_layer Layer normalized data (default: \"data\") n_bins Number pseudotime bins min_cells_bin Minimum cells per bin top_n_genes Number top variable genes max_cells Maximum number cells min_expr_pct Minimum expression percentage n_cores Number cores bin_method Binning method (\"quantile\" \"equal_width\")","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/compute_pseudotime_mi_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Pseudotime-Aware MI Networks — compute_pseudotime_mi_network","text":"List MI networks per pseudotime bin","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/detect_communities.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Communities Detects communities using label propagation and neighborhood overlap. — detect_communities","title":"Detect Communities Detects communities using label propagation and neighborhood overlap. — detect_communities","text":"Detect Communities Detects communities using label propagation neighborhood overlap.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/detect_communities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Communities Detects communities using label propagation and neighborhood overlap. — detect_communities","text":"","code":"detect_communities(graph, min_size = 10, overlap_threshold = 0.1)"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/detect_communities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Communities Detects communities using label propagation and neighborhood overlap. — detect_communities","text":"graph Input igraph object. min_size Minimum community size. overlap_threshold Overlap threshold adding genes (default: 0.1).","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/detect_communities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect Communities Detects communities using label propagation and neighborhood overlap. — detect_communities","text":"List communities sizes.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/detect_communities_across_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Communities Across Pseudotime Bins — detect_communities_across_bins","title":"Detect Communities Across Pseudotime Bins — detect_communities_across_bins","text":"Detects communities pseudotime bin using percolation, Leiden clustering, neighborhood overlap.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/detect_communities_across_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Communities Across Pseudotime Bins — detect_communities_across_bins","text":"","code":"detect_communities_across_bins(   pt_results,   min_size = 10,   n_iterations = 100,   edge_fraction = 0.6,   freq_threshold = 0.5,   percentile = 0.95,   resolution_parameter = 0.6,   overlap_threshold = 0.05 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/detect_communities_across_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Communities Across Pseudotime Bins — detect_communities_across_bins","text":"pt_results list pseudotime bin results compute_pseudotime_mi_network. min_size Integer, minimum size communities retain (default: 10). n_iterations Integer, number percolation iterations (default: 100). edge_fraction Numeric, fraction edges keep percolation (default: 0.6). freq_threshold Numeric, frequency threshold consensus edges (default: 0.5). percentile Numeric, percentile edge thresholding (default: 0.95). resolution_parameter Numeric, resolution parameter Leiden clustering (default: 0.6). overlap_threshold Numeric, threshold neighborhood overlap expansion (default: 0.05).","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/detect_communities_across_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect Communities Across Pseudotime Bins — detect_communities_across_bins","text":"list community detection results bin.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/edge_gain_loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Edge Gain/Loss Analysis — edge_gain_loss","title":"Edge Gain/Loss Analysis — edge_gain_loss","text":"Edge Gain/Loss Analysis","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/edge_gain_loss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edge Gain/Loss Analysis — edge_gain_loss","text":"","code":"edge_gain_loss(bin_graphs)"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/edge_gain_loss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edge Gain/Loss Analysis — edge_gain_loss","text":"bin_graphs List graphs per bin","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/edge_gain_loss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edge Gain/Loss Analysis — edge_gain_loss","text":"List stable, gained, lost edges","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/edge_pt_correlation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Edge-Pseudotime Correlations — edge_pt_correlation","title":"Compute Edge-Pseudotime Correlations — edge_pt_correlation","text":"Computes correlations edge weights pseudotime given graph.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/edge_pt_correlation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Edge-Pseudotime Correlations — edge_pt_correlation","text":"","code":"edge_pt_correlation(   graph,   seurat_obj,   pseudotime_col = \"pseudotime\",   assay = \"RNA\",   layer = \"data\",   method = \"spearman\",   edge_threshold = 0.95,   n_cores = 1 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/edge_pt_correlation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Edge-Pseudotime Correlations — edge_pt_correlation","text":"graph igraph object. seurat_obj Seurat object. pseudotime_col Character, metadata column pseudotime. assay Character, assay use. layer Character, data layer use. method Character, correlation method. edge_threshold Numeric, edge weight threshold. n_cores Integer, number cores parallel computation.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/edge_pt_correlation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Edge-Pseudotime Correlations — edge_pt_correlation","text":"data frame edge correlations.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/enrich_go.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Enrichment Analysis for Communities — enrich_go","title":"Perform Enrichment Analysis for Communities — enrich_go","text":"Performs enrichment analysis community using specified semantic space.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/enrich_go.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Enrichment Analysis for Communities — enrich_go","text":"","code":"enrich_go(   large_communities,   semantic_space = \"GO\",   ontology = \"BP\",   pvalueCutoff = 0.05,   qvalueCutoff = 0.2 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/enrich_go.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Enrichment Analysis for Communities — enrich_go","text":"large_communities list communities list community detection results (detect_communities_across_bins). semantic_space Character, semantic space use (\"GO\", \"KEGG\", \"\", \"Reactome\") (default: \"GO\"). ontology Character, GO ontology use (\"BP\", \"CC\", \"MF\", \"\") (default: \"BP\"). pvalueCutoff Numeric, p-value cutoff enrichment (default: 0.05). qvalueCutoff Numeric, q-value cutoff enrichment (default: 0.2).","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/enrich_go.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Enrichment Analysis for Communities — enrich_go","text":"named list enrichment results.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/filter_housekeeping.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Housekeeping Genes — filter_housekeeping","title":"Filter Housekeeping Genes — filter_housekeeping","text":"Filter Housekeeping Genes","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/filter_housekeeping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Housekeeping Genes — filter_housekeeping","text":"","code":"filter_housekeeping(gene_list)"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/filter_housekeeping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Housekeeping Genes — filter_housekeeping","text":"gene_list Vector gene names","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/filter_housekeeping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Housekeeping Genes — filter_housekeeping","text":"Filtered gene list excluding housekeeping genes","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/gene_pt_correlation.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene-Pseudotime Correlation — gene_pt_correlation","title":"Gene-Pseudotime Correlation — gene_pt_correlation","text":"Gene-Pseudotime Correlation","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/gene_pt_correlation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene-Pseudotime Correlation — gene_pt_correlation","text":"","code":"gene_pt_correlation(   seurat_obj,   pseudotime_col,   assay = \"RNA\",   layer = \"data\",   method = \"spearman\" )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/gene_pt_correlation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene-Pseudotime Correlation — gene_pt_correlation","text":"seurat_obj Seurat object pseudotime_col Metadata column name pseudotime assay Assay name layer Layer name method Correlation method","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/gene_pt_correlation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene-Pseudotime Correlation — gene_pt_correlation","text":"Data frame gene correlations","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/get_expr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Expression Data for a Cluster — get_expr_data","title":"Get Expression Data for a Cluster — get_expr_data","text":"Get Expression Data Cluster","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/get_expr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Expression Data for a Cluster — get_expr_data","text":"","code":"get_expr_data(   seurat_obj,   cluster_id,   cluster_field,   assay_name = \"RNA\",   counts_layer = \"counts\",   data_layer = \"data\",   top_n_genes = 5000,   max_cells = 1500,   min_expr_pct = 0.05 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/get_expr_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Expression Data for a Cluster — get_expr_data","text":"seurat_obj Seurat object cluster_id Cluster ID cluster_field Metadata column name clusters assay_name Assay name (default: \"RNA\") counts_layer Layer counts data (default: \"counts\") data_layer Layer normalized data (default: \"data\") top_n_genes Number top variable genes max_cells Maximum number cells min_expr_pct Minimum expression percentage","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/get_expr_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Expression Data for a Cluster — get_expr_data","text":"Expression matrix","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/make_hypergraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Hypergraph from Gene Groups — make_hypergraph","title":"Create Hypergraph from Gene Groups — make_hypergraph","text":"Create Hypergraph Gene Groups","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/make_hypergraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Hypergraph from Gene Groups — make_hypergraph","text":"","code":"make_hypergraph(group_list, all_genes)"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/make_hypergraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Hypergraph from Gene Groups — make_hypergraph","text":"group_list List gene groups all_genes genes","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/make_hypergraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Hypergraph from Gene Groups — make_hypergraph","text":"List containing hypergraph, incidence matrix, genes, groups","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/make_pt_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin Cells Along Pseudotime — make_pt_bins","title":"Bin Cells Along Pseudotime — make_pt_bins","text":"Bin Cells Along Pseudotime","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/make_pt_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin Cells Along Pseudotime — make_pt_bins","text":"","code":"make_pt_bins(seurat_obj, pseudotime_col, n_bins = 5, bin_method = \"quantile\")"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/make_pt_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin Cells Along Pseudotime — make_pt_bins","text":"seurat_obj Seurat object pseudotime_col Metadata column name pseudotime n_bins Number bins bin_method Binning method (\"quantile\" \"equal_width\")","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/make_pt_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bin Cells Along Pseudotime — make_pt_bins","text":"Vector bin assignments","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/percolate_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Percolate Graph — percolate_graph","title":"Percolate Graph — percolate_graph","text":"Creates consensus graph filtering edges 95th percentile retaining >=50","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/percolate_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percolate Graph — percolate_graph","text":"","code":"percolate_graph(   graph,   n_iterations = 50,   edge_fraction = 0.6,   freq_threshold = 0.5,   percentile = 0.95 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/percolate_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percolate Graph — percolate_graph","text":"graph Input igraph object. n_iterations Number percolation iterations. edge_fraction Fraction edges retain per iteration. freq_threshold Frequency threshold edge retention. percentile Percentile initial edge filtering (default: 0.95).","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/percolate_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Percolate Graph — percolate_graph","text":"Consensus igraph object.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_edge_correlations.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Edge-Pseudotime Correlation Density — plot_edge_correlations","title":"Plot Edge-Pseudotime Correlation Density — plot_edge_correlations","text":"Computes plots density edge-pseudotime correlations specified pseudotime bin cluster.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_edge_correlations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Edge-Pseudotime Correlation Density — plot_edge_correlations","text":"","code":"plot_edge_correlations(   comm_results,   pt_results,   seurat_obj,   bin_name,   cluster_field = \"RNA_snn_res.0.1\",   cluster_id = \"1\",   assay = \"RNA\",   layer = \"data\",   pseudotime_col = \"pseudotime\",   method = \"spearman\",   edge_threshold = 0.95,   n_cores = 5,   title = NULL )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_edge_correlations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Edge-Pseudotime Correlation Density — plot_edge_correlations","text":"comm_results list community detection results detect_communities_across_bins. pt_results list pseudotime bin results compute_pseudotime_mi_network. seurat_obj Seurat object containing pseudotime cluster metadata. bin_name Character, name pseudotime bin use (e.g., \"PT2\"). cluster_field Character, metadata field cluster IDs (default: \"RNA_snn_res.0.1\"). cluster_id Character, cluster ID filter cells (default: \"1\"). assay Character, assay use (default: \"RNA\"). layer Character, data layer use (default: \"data\"). pseudotime_col Character, metadata column pseudotime (default: \"pseudotime\"). method Character, correlation method (default: \"spearman\"). edge_threshold Numeric, edge weight threshold (default: 0.95). n_cores Integer, number cores parallel computation (default: 5). title Character, title plot (default: dynamically generated).","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_edge_correlations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Edge-Pseudotime Correlation Density — plot_edge_correlations","text":"ggplot object.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_edge_gain_loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Edge Gain/Loss Across Consecutive Pseudotime Bins — plot_edge_gain_loss","title":"Plot Edge Gain/Loss Across Consecutive Pseudotime Bins — plot_edge_gain_loss","text":"Plots count stable, gained, lost edges consecutive pseudotime bins returns edge details.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_edge_gain_loss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Edge Gain/Loss Across Consecutive Pseudotime Bins — plot_edge_gain_loss","text":"","code":"plot_edge_gain_loss(   pt_results,   cluster_id = \"C1\",   title = \"Edge Gain/Loss/Stable Counts Per Bin\" )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_edge_gain_loss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Edge Gain/Loss Across Consecutive Pseudotime Bins — plot_edge_gain_loss","text":"pt_results list pseudotime bin results compute_pseudotime_mi_network. cluster_id Character, cluster ID display (default: \"C1\"). title Character, title plot (default: \"Edge Gain/Loss/Stable Counts Per Bin\").","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_edge_gain_loss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Edge Gain/Loss Across Consecutive Pseudotime Bins — plot_edge_gain_loss","text":"list containing ggplot object list edge changes (stable, gained, lost) per bin pair.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_go_terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Enrichment Terms — plot_go_terms","title":"Plot Enrichment Terms — plot_go_terms","text":"Visualizes top enrichment terms enrichment results dot plot.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_go_terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Enrichment Terms — plot_go_terms","text":"","code":"plot_go_terms(   enrich_results,   top_n_terms = 4,   title = \"GO Terms for Communities\",   ontology = \"BP\" )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_go_terms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Enrichment Terms — plot_go_terms","text":"enrich_results named list enrichment results enrich_go. top_n_terms Integer, number top terms plot per community (default: 4). title Character, title plot (default: \"GO Terms Communities\"). ontology Character, ontology used (\"BP\", \"CC\", \"MF\", \"\", \"KEGG\", \"\", \"Reactome\") (default: \"BP\").","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_go_terms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Enrichment Terms — plot_go_terms","text":"ggplot object.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_hypergraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Hypergraph with Overlapping Genes Highlighted — plot_hypergraph","title":"Plot Hypergraph with Overlapping Genes Highlighted — plot_hypergraph","text":"Visualizes hypergraph communities hyperedges, highlighting overlapping genes specified communities.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_hypergraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Hypergraph with Overlapping Genes Highlighted — plot_hypergraph","text":"","code":"plot_hypergraph(   large_communities,   comm_indices = NULL,   title = \"Hypergraph with Overlapping Communities\",   key_genes = c(\"PRSS1\", \"PRSS2\") )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_hypergraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Hypergraph with Overlapping Genes Highlighted — plot_hypergraph","text":"large_communities list communities, element contains nodes community. comm_indices Integer vector, indices communities plot (default: communities). title Character, title plot (default: \"Hypergraph Overlapping Communities\"). key_genes Character vector, additional genes label (default: c(\"PRSS1\", \"PRSS2\")).","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_hypergraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Hypergraph with Overlapping Genes Highlighted — plot_hypergraph","text":"ggraph plot object.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_mi_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot MI Network with Community Coloring — plot_mi_network","title":"Plot MI Network with Community Coloring — plot_mi_network","text":"Visualizes subset MI network community coloring, labeling top nodes community.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_mi_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot MI Network with Community Coloring — plot_mi_network","text":"","code":"plot_mi_network(   g_consensus,   large_communities,   sample_size = 100,   top_n_per_comm = 5,   title = \"Network Communities\" )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_mi_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot MI Network with Community Coloring — plot_mi_network","text":"g_consensus igraph object representing consensus graph. large_communities list communities, element contains nodes community. sample_size Integer, number nodes sample graph (default: 100). top_n_per_comm Integer, number top nodes per community label (default: 5). title Character, title plot (default: \"Network Communities\").","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_mi_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot MI Network with Community Coloring — plot_mi_network","text":"ggraph plot object.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_module_trajectories.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Module-Score Trajectories Across Pseudotime — plot_module_trajectories","title":"Plot Module-Score Trajectories Across Pseudotime — plot_module_trajectories","text":"Computes plots module scores specified communities genes along pseudotime.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_module_trajectories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Module-Score Trajectories Across Pseudotime — plot_module_trajectories","text":"","code":"plot_module_trajectories(   comm_results,   seurat_obj,   bin_index,   comm_indices = NULL,   custom_modules = NULL,   cluster_field = \"RNA_snn_res.0.1\",   cluster_id = \"1\",   assay = \"RNA\",   title = \"Module-Score Trajectories\" )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_module_trajectories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Module-Score Trajectories Across Pseudotime — plot_module_trajectories","text":"comm_results list community detection results detect_communities_across_bins. seurat_obj Seurat object containing pseudotime cluster metadata. bin_index Integer, index pseudotime bin use (e.g., 2 PT2). comm_indices Integer vector, indices communities plot (default: NULL, uses communities). custom_modules named list custom gene sets plot (default: NULL; provided, overrides comm_indices). cluster_field Character, metadata field cluster IDs (default: \"RNA_snn_res.0.1\"). cluster_id Character, cluster ID filter cells (default: \"1\"). assay Character, assay use module scoring (default: \"RNA\"). title Character, title plot (default: \"Module-Score Trajectories\").","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/plot_module_trajectories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Module-Score Trajectories Across Pseudotime — plot_module_trajectories","text":"ggplot object.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/summarize_hub_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Hub Genes in Communities — summarize_hub_genes","title":"Summarize Hub Genes in Communities — summarize_hub_genes","text":"Generates flextable summarizing top hub genes (degree) community consensus graph.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/summarize_hub_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Hub Genes in Communities — summarize_hub_genes","text":"","code":"summarize_hub_genes(   g_consensus,   large_communities,   cluster_name = \"Cluster\",   top_n = 10 )"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/summarize_hub_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Hub Genes in Communities — summarize_hub_genes","text":"g_consensus igraph object representing consensus graph. large_communities list communities, element contains nodes community. cluster_name Character, name cluster (default: \"Cluster\"). top_n Integer, number top hub genes include per community (default: 10).","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/summarize_hub_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Hub Genes in Communities — summarize_hub_genes","text":"flextable object.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/summarize_hub_genes_across_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Hub Genes Across Pseudotime Bins — summarize_hub_genes_across_bins","title":"Summarize Hub Genes Across Pseudotime Bins — summarize_hub_genes_across_bins","text":"Generates flextable summarizing top hub genes (degree) community across pseudotime bins.","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/summarize_hub_genes_across_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Hub Genes Across Pseudotime Bins — summarize_hub_genes_across_bins","text":"","code":"summarize_hub_genes_across_bins(comm_results, pt_results, top_n = 10)"},{"path":"https://iichelhadi.github.io/miEdgeR/reference/summarize_hub_genes_across_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Hub Genes Across Pseudotime Bins — summarize_hub_genes_across_bins","text":"comm_results list community detection results detect_communities_across_bins. pt_results list pseudotime bin results compute_pseudotime_mi_network. top_n Integer, number top hub genes include per community (default: 10).","code":""},{"path":"https://iichelhadi.github.io/miEdgeR/reference/summarize_hub_genes_across_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Hub Genes Across Pseudotime Bins — summarize_hub_genes_across_bins","text":"flextable object.","code":""}]
