# Load required packages
library(testthat)
library(miEdgeR)
library(Seurat)
library(igraph)
# Use Seurat’s small PBMC example
data("pbmc_small")
# Ensure pbmc_small has the metadata field we need
# pbmc_small has "seurat_clusters" by default
cluster_field <- "seurat_clusters"
cluster_id    <- 1L
# 1. Test get_expr_data()
test_that("get_expr_data returns a non‐empty numeric matrix", {
expr_mat <- get_expr_data(
seurat_obj   = pbmc_small,
cluster_id   = cluster_id,
cluster_field= cluster_field,
assay_name   = "RNA",
counts_slot  = "counts",
data_slot    = "data",
top_n_genes  = 50,
max_cells    = 100,
min_expr_pct = 0.05
)
expect_true(is.matrix(expr_mat))
expect_type(expr_mat, "double")
expect_gt(nrow(expr_mat),  0)
expect_gt(ncol(expr_mat),  0)
})
# Use Seurat’s small PBMC example
seurat_obj <- readRDS('/media/atlab/SanDisk/miEdgeR_bak/phs003141_processed.rds')
seurat_obj
DimPlot(seurat_obj, group.by = 'RNA_snn_res.0.2')
# Ensure pbmc_small has the metadata field we need
# pbmc_small has "seurat_clusters" by default
cluster_field <- "RNA_snn_res.0.2"
cluster_id    <- 5L
# 1. Test get_expr_data()
test_that("get_expr_data returns a non‐empty numeric matrix", {
expr_mat <- get_expr_data(
seurat_obj   = seurat_obj,
cluster_id   = cluster_id,
cluster_field= cluster_field,
assay_name   = "RNA",
counts_slot  = "counts",
data_slot    = "data",
top_n_genes  = 50,
max_cells    = 100,
min_expr_pct = 0.05
)
expect_true(is.matrix(expr_mat))
expect_type(expr_mat, "double")
expect_gt(nrow(expr_mat),  0)
expect_gt(ncol(expr_mat),  0)
})
# 2. Test compute_mi_matrix_parallel()
test_that("compute_mi_matrix_parallel returns a square MI matrix with zero diagonal", {
# use only the first 10 genes for speed
expr_subset <- get_expr_data(
seurat_obj    = seurat_obj,
cluster_id    = cluster_id,
cluster_field = cluster_field,
top_n_genes   = 10,
max_cells     = 100,
min_expr_pct  = 0.05
)
mi_mat <- compute_mi_matrix_parallel(expr_subset, n_cores = 1)
expect_true(is.matrix(mi_mat))
expect_equal(dim(mi_mat), c(10, 10))
expect_equal(diag(mi_mat), rep(0, 10))
# mutual information should be non‐negative
expect_true(all(mi_mat >= 0))
})
# 3. Test build_mi_graph()
test_that("build_mi_graph returns an igraph object with correct nodes", {
expr_subset <- get_expr_data(
seurat_obj    = seurat_obj,
cluster_id    = cluster_id,
cluster_field = cluster_field,
top_n_genes   = 10,
max_cells     = 100,
min_expr_pct  = 0.05
)
mi_mat <- compute_mi_matrix_parallel(expr_subset, n_cores = 1)
g <- build_mi_graph(mi_mat, threshold_method = "percentile", percentile = 0.5)
expect_true(igraph::is_igraph(g))
expect_setequal(V(g)$name, rownames(mi_mat))
})
# 4. Test compute_mi_network()
test_that("compute_mi_network returns a list with graph, mi_matrix, and genes", {
net <- compute_mi_network(
seurat_obj    = seurat_obj,
cluster_id    = cluster_id,
cluster_field = cluster_field,
assay_name    = "RNA",
counts_slot   = "counts",
data_slot     = "data",
top_n_genes   = 20,
max_cells     = 100,
n_cores       = 1
)
expect_true(is.list(net))
expect_setequal(names(net), c("graph", "mi_matrix", "genes"))
expect_true(igraph::is_igraph(net$graph))
expect_true(is.matrix(net$mi_matrix))
expect_true(is.character(net$genes))
expect_equal(length(net$genes), nrow(net$mi_matrix))
})
# 1. Test get_expr_data()
test_that("get_expr_data returns a non‐empty numeric matrix", {
expr_mat <- get_expr_data(
seurat_obj   = seurat_obj,
cluster_id   = cluster_id,
cluster_field= cluster_field,
assay_name   = "RNA",
counts_slot  = "counts",
data_slot    = "data",
top_n_genes  = 50,
max_cells    = 100,
min_expr_pct = 0.05
)
expect_true(is.matrix(expr_mat))
expect_type(expr_mat, "double")
expect_gt(nrow(expr_mat),  0)
expect_gt(ncol(expr_mat),  0)
})
# 2. Test compute_mi_matrix_parallel()
test_that("compute_mi_matrix_parallel returns a square MI matrix with zero diagonal", {
# use only the first 10 genes for speed
expr_subset <- get_expr_data(
seurat_obj    = seurat_obj,
cluster_id    = cluster_id,
cluster_field = cluster_field,
top_n_genes   = 10,
max_cells     = 100,
min_expr_pct  = 0.05
)
mi_mat <- compute_mi_matrix_parallel(expr_subset, n_cores = 1)
expect_true(is.matrix(mi_mat))
expect_equal(dim(mi_mat), c(10, 10))
expect_equal(diag(mi_mat), rep(0, 10))
# mutual information should be non‐negative
expect_true(all(mi_mat >= 0))
})
# 2. Test compute_mi_matrix_parallel()
test_that("compute_mi_matrix_parallel returns a square MI matrix with zero diagonal", {
# use only the first 10 genes for speed
expr_subset <- get_expr_data(
seurat_obj    = seurat_obj,
cluster_id    = cluster_id,
cluster_field = cluster_field,
top_n_genes   = 10,
max_cells     = 100,
min_expr_pct  = 0.05
)
mi_mat <- compute_mi_matrix_parallel(expr_subset, n_cores = 1)
expect_true(is.matrix(mi_mat))
expect_equal(dim(mi_mat), c(10, 10))
expect_equal(unname(diag(mi_mat)), rep(0, 10))
# mutual information should be non‐negative
expect_true(all(mi_mat >= 0))
})
# 3. Test build_mi_graph()
test_that("build_mi_graph returns an igraph object with correct nodes", {
expr_subset <- get_expr_data(
seurat_obj    = seurat_obj,
cluster_id    = cluster_id,
cluster_field = cluster_field,
top_n_genes   = 10,
max_cells     = 100,
min_expr_pct  = 0.05
)
mi_mat <- compute_mi_matrix_parallel(expr_subset, n_cores = 1)
g <- build_mi_graph(mi_mat, threshold_method = "percentile", percentile = 0.5)
expect_true(igraph::is_igraph(g))
expect_setequal(V(g)$name, rownames(mi_mat))
})
# 4. Test compute_mi_network()
test_that("compute_mi_network returns a list with graph, mi_matrix, and genes", {
net <- compute_mi_network(
seurat_obj    = seurat_obj,
cluster_id    = cluster_id,
cluster_field = cluster_field,
assay_name    = "RNA",
counts_slot   = "counts",
data_slot     = "data",
top_n_genes   = 20,
max_cells     = 100,
n_cores       = 1
)
expect_true(is.list(net))
expect_setequal(names(net), c("graph", "mi_matrix", "genes"))
expect_true(igraph::is_igraph(net$graph))
expect_true(is.matrix(net$mi_matrix))
expect_true(is.character(net$genes))
expect_equal(length(net$genes), nrow(net$mi_matrix))
})
# Run all tests
test_dir <- tempdir()
cat("Running tests...\n")
testthat::test_dir(test_dir, reporter = "Summary")
test_dir
testthat::test_dir(test_dir, reporter = "Summary")
cat("If you see no failures above, all core functions are behaving as expected.\n")
#!/usr/bin/env Rscript
# Test script for miEdgeR --------------------------------------------------
# Load required packages
library(testthat)
library(miEdgeR)
library(Seurat)
library(igraph)
# Use Seurat’s small PBMC example
seurat_obj <- readRDS('/media/atlab/SanDisk/miEdgeR_bak/phs003141_processed.rds')
DimPlot(seurat_obj, group.by = 'RNA_snn_res.0.2')
# Ensure seurat_obj has the metadata field we need
# seurat_obj has "seurat_clusters" by default
cluster_field <- "RNA_snn_res.0.2"
cluster_id    <- 5L
# 1. Test get_expr_data()
test_that("get_expr_data returns a non‐empty numeric matrix", {
expr_mat <- get_expr_data(
seurat_obj   = seurat_obj,
cluster_id   = cluster_id,
cluster_field= cluster_field,
assay_name   = "RNA",
counts_slot  = "counts",
data_slot    = "data",
top_n_genes  = 50,
max_cells    = 100,
min_expr_pct = 0.05
)
expect_true(is.matrix(expr_mat))
expect_type(expr_mat, "double")
expect_gt(nrow(expr_mat),  0)
expect_gt(ncol(expr_mat),  0)
})
# 2. Test compute_mi_matrix_parallel()
test_that("compute_mi_matrix_parallel returns a square MI matrix with zero diagonal", {
# use only the first 10 genes for speed
expr_subset <- get_expr_data(
seurat_obj    = seurat_obj,
cluster_id    = cluster_id,
cluster_field = cluster_field,
top_n_genes   = 10,
max_cells     = 100,
min_expr_pct  = 0.05
)
mi_mat <- compute_mi_matrix_parallel(expr_subset, n_cores = 1)
expect_true(is.matrix(mi_mat))
expect_equal(dim(mi_mat), c(10, 10))
expect_equal(unname(diag(mi_mat)), rep(0, 10))
# mutual information should be non‐negative
expect_true(all(mi_mat >= 0))
})
# 3. Test build_mi_graph()
test_that("build_mi_graph returns an igraph object with correct nodes", {
expr_subset <- get_expr_data(
seurat_obj    = seurat_obj,
cluster_id    = cluster_id,
cluster_field = cluster_field,
top_n_genes   = 10,
max_cells     = 100,
min_expr_pct  = 0.05
)
mi_mat <- compute_mi_matrix_parallel(expr_subset, n_cores = 1)
g <- build_mi_graph(mi_mat, threshold_method = "percentile", percentile = 0.5)
expect_true(igraph::is_igraph(g))
expect_setequal(V(g)$name, rownames(mi_mat))
})
# 4. Test compute_mi_network()
test_that("compute_mi_network returns a list with graph, mi_matrix, and genes", {
net <- compute_mi_network(
seurat_obj    = seurat_obj,
cluster_id    = cluster_id,
cluster_field = cluster_field,
assay_name    = "RNA",
counts_slot   = "counts",
data_slot     = "data",
top_n_genes   = 20,
max_cells     = 100,
n_cores       = 1
)
expect_true(is.list(net))
expect_setequal(names(net), c("graph", "mi_matrix", "genes"))
expect_true(igraph::is_igraph(net$graph))
expect_true(is.matrix(net$mi_matrix))
expect_true(is.character(net$genes))
expect_equal(length(net$genes), nrow(net$mi_matrix))
})
# Run all tests
test_dir <- tempdir()
cat("Running tests...\n")
testthat::test_dir(test_dir, reporter = "Summary")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
devtools::test()
usethis::use_test()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
testthat::test_file("/tests/testthat/test-miEdgeR.R")
testthat::test_file("/tests/testthat/test-miEdgeR.R")
testthat::test_file("tests/testthat/test-miEdgeR.R")
testthat::test_file("tests/testthat/test-miEdgeR.R")
seurat_obj
seurat_obj$RNA_snn_res.0.2 %>% table()
library(miEdgeR)
library(Seurat)
library(igraph)
library(dplyr)
library(hypergraph)
# 1) Load your Seurat object
seurat_obj <- readRDS("/media/atlab/SanDisk/miEdgeR_bak/phs003141_processed.rds")
# 2) Define clustering field and clusters
cluster_field <- "RNA_snn_res.0.2"
clusters      <- sort(unique(seurat_obj@meta.data[[cluster_field]]))
cat("Found clusters:", paste(clusters, collapse = ", "), "\n\n")
# 3) Compute MI networks for each cluster
mi_results <- list()
# 3) Compute MI networks for each cluster
mi_results <- list()
for (cl in clusters) {
cat("→ Computing MI network for cluster", cl, "…\n")
mi_results[[as.character(cl)]] <- compute_mi_network(
seurat_obj    = seurat_obj,
cluster_id    = cl,
cluster_field = cluster_field,
assay_name    = "RNA",
counts_slot   = "counts",
data_slot     = "data",
top_n_genes   = 5000,
max_cells     = 1500,
n_cores       = 5        # limit cores to avoid overloading
)
}
# 3) Compute MI networks for each cluster
mi_results <- list()
# 3) Compute MI networks for each cluster
mi_results <- list()
for (cl in clusters) {
cat("→ Computing MI network for cluster", cl, "…\n")
mi_results[[as.character(cl)]] <- compute_mi_network(
seurat_obj    = seurat_obj,
cluster_id    = cl,
cluster_field = cluster_field,
assay_name    = "RNA",
counts_slot   = "counts",
data_slot     = "data",
top_n_genes   = 1000,
max_cells     = 500,
n_cores       = 5        # limit cores to avoid overloading
)
}
# 4) Focus on cluster 5 for a percolation + community example
res5   <- mi_results[["5"]]
g5     <- res5$graph
genes5 <- res5$genes
# 4a) Threshold at the 95th percentile of MI weights
edges5 <- as_data_frame(g5, what = "edges")
# 4a) Threshold at the 95th percentile of MI weights
edges5 <- igraph::as_data_frame(g5, what = "edges")
thr95  <- quantile(edges5$weight, 0.95, na.rm = TRUE)
g5_thr <- graph_from_data_frame(edges5 %>% filter(weight >= thr95), directed = FALSE)
E(g5_thr)$weight <- edges5$weight[edges5$weight >= thr95]
# 4b) Percolation consensus: sample 60% of edges, repeat, then keep edges seen ≥25% of runs
n_iter <- 50
all_runs <- lapply(seq_len(n_iter), function(i) {
set.seed(1000 + i)
sampled_edges <- sample(E(g5_thr), size = round(length(E(g5_thr)) * 0.6))
as_data_frame(subgraph.edges(g5_thr, sampled_edges), what = "edges")
})
# 4b) Percolation consensus: sample 60% of edges, repeat, then keep edges seen ≥25% of runs
n_iter <- 50
all_runs <- lapply(seq_len(n_iter), function(i) {
set.seed(1000 + i)
sampled_edges <- sample(E(g5_thr), size = round(length(E(g5_thr)) * 0.6))
igraph::as_data_frame(subgraph.edges(g5_thr, sampled_edges), what = "edges")
})
cons_df <- bind_rows(all_runs) %>%
group_by(from, to) %>%
summarise(freq = n(), mean_w = mean(weight), .groups = "drop") %>%
filter(freq >= n_iter * 0.25)
g5_cons <- graph_from_data_frame(cons_df, directed = FALSE)
E(g5_cons)$weight <- cons_df$mean_w
# 4c) Leiden community detection on the consensus graph
set.seed(42)
lev <- cluster_leiden(g5_cons, resolution_parameter = 0.1)
modules5 <- split(V(g5_cons)$name, membership(lev))
cat("\nCluster 5 detected modules (Leiden):\n")
print(sapply(modules5, length))
# 5) Build a hypergraph from those modules
hg5 <- make_hypergraph(modules5, genes5)
cat("\nHypergraph for cluster 5:\n")
cat(" • # genes:", length(hg5$genes), "\n")
cat(" • # modules:", length(hg5$groups), "\n")
cat(" • incidence matrix dims:", dim(hg5$incidence_matrix), "\n")
# 6) (Optional) Simplify and filter the original MI graph for plotting
g5_filt <- filter_graph(g5)
g5_simp <- simplify_graph(g5_filt, max_nodes = 50)
cat("\nSimplified graph for plotting has", vcount(g5_simp), "nodes.\n")
# 4) Focus on cluster 5 for a percolation + community example
res5   <- mi_results[["1"]]
g5     <- res5$graph
genes5 <- res5$genes
# 4a) Threshold at the 95th percentile of MI weights
edges5 <- igraph::as_data_frame(g5, what = "edges")
thr95  <- quantile(edges5$weight, 0.95, na.rm = TRUE)
g5_thr <- graph_from_data_frame(edges5 %>% filter(weight >= thr95), directed = FALSE)
E(g5_thr)$weight <- edges5$weight[edges5$weight >= thr95]
# 4b) Percolation consensus: sample 60% of edges, repeat, then keep edges seen ≥25% of runs
n_iter <- 50
all_runs <- lapply(seq_len(n_iter), function(i) {
set.seed(1000 + i)
sampled_edges <- sample(E(g5_thr), size = round(length(E(g5_thr)) * 0.6))
igraph::as_data_frame(subgraph.edges(g5_thr, sampled_edges), what = "edges")
})
cons_df <- bind_rows(all_runs) %>%
group_by(from, to) %>%
summarise(freq = n(), mean_w = mean(weight), .groups = "drop") %>%
filter(freq >= n_iter * 0.25)
g5_cons <- graph_from_data_frame(cons_df, directed = FALSE)
E(g5_cons)$weight <- cons_df$mean_w
# 4c) Leiden community detection on the consensus graph
set.seed(42)
lev <- cluster_leiden(g5_cons, resolution_parameter = 0.1)
modules5 <- split(V(g5_cons)$name, membership(lev))
cat("\nCluster 5 detected modules (Leiden):\n")
print(sapply(modules5, length))
# 5) Build a hypergraph from those modules
hg5 <- make_hypergraph(modules5, genes5)
cat("\nHypergraph for cluster 5:\n")
cat(" • # genes:", length(hg5$genes), "\n")
cat(" • # modules:", length(hg5$groups), "\n")
cat(" • incidence matrix dims:", dim(hg5$incidence_matrix), "\n")
# 6) (Optional) Simplify and filter the original MI graph for plotting
g5_filt <- filter_graph(g5)
g5_simp <- simplify_graph(g5_filt, max_nodes = 50)
cat("\nSimplified graph for plotting has", vcount(g5_simp), "nodes.\n")
cat("\nWorkflow complete. Results saved to working directory.\n")
